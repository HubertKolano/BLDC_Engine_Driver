
AGH_Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057bc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08005950  08005950  00015950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b2c  08005b2c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005b2c  08005b2c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b2c  08005b2c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b2c  08005b2c  00015b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b30  08005b30  00015b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000298  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000308  20000308  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012bfa  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029d4  00000000  00000000  00032c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f08  00000000  00000000  00035670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000df0  00000000  00000000  00036578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000217d0  00000000  00000000  00037368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001569f  00000000  00000000  00058b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb105  00000000  00000000  0006e1d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001392dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f5c  00000000  00000000  0013932c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005938 	.word	0x08005938

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	08005938 	.word	0x08005938

080001d4 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80001da:	1d3b      	adds	r3, r7, #4
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80001e4:	4b0e      	ldr	r3, [pc, #56]	; (8000220 <MX_DAC1_Init+0x4c>)
 80001e6:	4a0f      	ldr	r2, [pc, #60]	; (8000224 <MX_DAC1_Init+0x50>)
 80001e8:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80001ea:	480d      	ldr	r0, [pc, #52]	; (8000220 <MX_DAC1_Init+0x4c>)
 80001ec:	f000 ff2d 	bl	800104a <HAL_DAC_Init>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 80001f6:	f000 fab9 	bl	800076c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80001fa:	2300      	movs	r3, #0
 80001fc:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80001fe:	2300      	movs	r3, #0
 8000200:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	2210      	movs	r2, #16
 8000206:	4619      	mov	r1, r3
 8000208:	4805      	ldr	r0, [pc, #20]	; (8000220 <MX_DAC1_Init+0x4c>)
 800020a:	f000 ffb0 	bl	800116e <HAL_DAC_ConfigChannel>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000214:	f000 faaa 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000218:	bf00      	nop
 800021a:	3710      	adds	r7, #16
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}
 8000220:	2000008c 	.word	0x2000008c
 8000224:	40007400 	.word	0x40007400

08000228 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b08a      	sub	sp, #40	; 0x28
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000230:	f107 0314 	add.w	r3, r7, #20
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	605a      	str	r2, [r3, #4]
 800023a:	609a      	str	r2, [r3, #8]
 800023c:	60da      	str	r2, [r3, #12]
 800023e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a15      	ldr	r2, [pc, #84]	; (800029c <HAL_DAC_MspInit+0x74>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d124      	bne.n	8000294 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800024a:	4b15      	ldr	r3, [pc, #84]	; (80002a0 <HAL_DAC_MspInit+0x78>)
 800024c:	69db      	ldr	r3, [r3, #28]
 800024e:	4a14      	ldr	r2, [pc, #80]	; (80002a0 <HAL_DAC_MspInit+0x78>)
 8000250:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000254:	61d3      	str	r3, [r2, #28]
 8000256:	4b12      	ldr	r3, [pc, #72]	; (80002a0 <HAL_DAC_MspInit+0x78>)
 8000258:	69db      	ldr	r3, [r3, #28]
 800025a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800025e:	613b      	str	r3, [r7, #16]
 8000260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000262:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <HAL_DAC_MspInit+0x78>)
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	4a0e      	ldr	r2, [pc, #56]	; (80002a0 <HAL_DAC_MspInit+0x78>)
 8000268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800026c:	6153      	str	r3, [r2, #20]
 800026e:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <HAL_DAC_MspInit+0x78>)
 8000270:	695b      	ldr	r3, [r3, #20]
 8000272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000276:	60fb      	str	r3, [r7, #12]
 8000278:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800027a:	2320      	movs	r3, #32
 800027c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800027e:	2303      	movs	r3, #3
 8000280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000282:	2300      	movs	r3, #0
 8000284:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000286:	f107 0314 	add.w	r3, r7, #20
 800028a:	4619      	mov	r1, r3
 800028c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000290:	f001 f832 	bl	80012f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000294:	bf00      	nop
 8000296:	3728      	adds	r7, #40	; 0x28
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40007400 	.word	0x40007400
 80002a0:	40021000 	.word	0x40021000

080002a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b08a      	sub	sp, #40	; 0x28
 80002a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002aa:	f107 0314 	add.w	r3, r7, #20
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]
 80002b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ba:	4b2c      	ldr	r3, [pc, #176]	; (800036c <MX_GPIO_Init+0xc8>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	4a2b      	ldr	r2, [pc, #172]	; (800036c <MX_GPIO_Init+0xc8>)
 80002c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002c4:	6153      	str	r3, [r2, #20]
 80002c6:	4b29      	ldr	r3, [pc, #164]	; (800036c <MX_GPIO_Init+0xc8>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002ce:	613b      	str	r3, [r7, #16]
 80002d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002d2:	4b26      	ldr	r3, [pc, #152]	; (800036c <MX_GPIO_Init+0xc8>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	4a25      	ldr	r2, [pc, #148]	; (800036c <MX_GPIO_Init+0xc8>)
 80002d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002dc:	6153      	str	r3, [r2, #20]
 80002de:	4b23      	ldr	r3, [pc, #140]	; (800036c <MX_GPIO_Init+0xc8>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002e6:	60fb      	str	r3, [r7, #12]
 80002e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ea:	4b20      	ldr	r3, [pc, #128]	; (800036c <MX_GPIO_Init+0xc8>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	4a1f      	ldr	r2, [pc, #124]	; (800036c <MX_GPIO_Init+0xc8>)
 80002f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002f4:	6153      	str	r3, [r2, #20]
 80002f6:	4b1d      	ldr	r3, [pc, #116]	; (800036c <MX_GPIO_Init+0xc8>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002fe:	60bb      	str	r3, [r7, #8]
 8000300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000302:	4b1a      	ldr	r3, [pc, #104]	; (800036c <MX_GPIO_Init+0xc8>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	4a19      	ldr	r2, [pc, #100]	; (800036c <MX_GPIO_Init+0xc8>)
 8000308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800030c:	6153      	str	r3, [r2, #20]
 800030e:	4b17      	ldr	r3, [pc, #92]	; (800036c <MX_GPIO_Init+0xc8>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000316:	607b      	str	r3, [r7, #4]
 8000318:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800031a:	2200      	movs	r2, #0
 800031c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000324:	f001 f972 	bl	800160c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800032c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800032e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000334:	2300      	movs	r3, #0
 8000336:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000338:	f107 0314 	add.w	r3, r7, #20
 800033c:	4619      	mov	r1, r3
 800033e:	480c      	ldr	r0, [pc, #48]	; (8000370 <MX_GPIO_Init+0xcc>)
 8000340:	f000 ffda 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800034a:	2301      	movs	r3, #1
 800034c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034e:	2300      	movs	r3, #0
 8000350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000352:	2300      	movs	r3, #0
 8000354:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000356:	f107 0314 	add.w	r3, r7, #20
 800035a:	4619      	mov	r1, r3
 800035c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000360:	f000 ffca 	bl	80012f8 <HAL_GPIO_Init>

}
 8000364:	bf00      	nop
 8000366:	3728      	adds	r7, #40	; 0x28
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40021000 	.word	0x40021000
 8000370:	48000800 	.word	0x48000800

08000374 <Set_BLDC_Direction>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void Set_BLDC_Direction(BLDC_Directions_T bldc_direction)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
	if (bldc_direction < BLDC_Direction_No)
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	2b01      	cmp	r3, #1
 8000382:	d811      	bhi.n	80003a8 <Set_BLDC_Direction+0x34>
	{
		if (bldc_direction == BLDC_Direction_Left)
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d107      	bne.n	800039a <Set_BLDC_Direction+0x26>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800038a:	2201      	movs	r2, #1
 800038c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000394:	f001 f93a 	bl	800160c <HAL_GPIO_WritePin>
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
		}
	}
}
 8000398:	e006      	b.n	80003a8 <Set_BLDC_Direction+0x34>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800039a:	2200      	movs	r2, #0
 800039c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a4:	f001 f932 	bl	800160c <HAL_GPIO_WritePin>
}
 80003a8:	bf00      	nop
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <Set_DAC_Value>:

static void Set_DAC_Value(int voltage)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, voltage);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2200      	movs	r2, #0
 80003bc:	2110      	movs	r1, #16
 80003be:	4803      	ldr	r0, [pc, #12]	; (80003cc <Set_DAC_Value+0x1c>)
 80003c0:	f000 fe65 	bl	800108e <HAL_DAC_SetValue>
}
 80003c4:	bf00      	nop
 80003c6:	3708      	adds	r7, #8
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	2000008c 	.word	0x2000008c

080003d0 <Uart_Parse_Command>:

static void Uart_Parse_Command(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
	if (true == Uart_StartsWith(Uart_Rx_Buffer, (uint8_t*)UART_COMMAND_BLDC_DIRECTION_LEFT, 19U))
 80003d6:	2213      	movs	r2, #19
 80003d8:	492e      	ldr	r1, [pc, #184]	; (8000494 <Uart_Parse_Command+0xc4>)
 80003da:	482f      	ldr	r0, [pc, #188]	; (8000498 <Uart_Parse_Command+0xc8>)
 80003dc:	f000 f870 	bl	80004c0 <Uart_StartsWith>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d00d      	beq.n	8000402 <Uart_Parse_Command+0x32>
	{
		Set_BLDC_Direction(BLDC_Direction_Left);
 80003e6:	2000      	movs	r0, #0
 80003e8:	f7ff ffc4 	bl	8000374 <Set_BLDC_Direction>

		memcpy(Uart_Tx_Buffer, (uint8_t*)"DIRECTION_CHANGED\n", 18U);
 80003ec:	2212      	movs	r2, #18
 80003ee:	492b      	ldr	r1, [pc, #172]	; (800049c <Uart_Parse_Command+0xcc>)
 80003f0:	482b      	ldr	r0, [pc, #172]	; (80004a0 <Uart_Parse_Command+0xd0>)
 80003f2:	f005 f9a9 	bl	8005748 <memcpy>
		HAL_UART_Transmit_IT(&huart2, Uart_Tx_Buffer, 18U);
 80003f6:	2212      	movs	r2, #18
 80003f8:	4929      	ldr	r1, [pc, #164]	; (80004a0 <Uart_Parse_Command+0xd0>)
 80003fa:	482a      	ldr	r0, [pc, #168]	; (80004a4 <Uart_Parse_Command+0xd4>)
 80003fc:	f003 fe56 	bl	80040ac <HAL_UART_Transmit_IT>
 8000400:	e03b      	b.n	800047a <Uart_Parse_Command+0xaa>
	}
	else if (true == Uart_StartsWith(Uart_Rx_Buffer, (uint8_t*)UART_COMMAND_BLDC_DIRECTION_RIGHT, 20U))
 8000402:	2214      	movs	r2, #20
 8000404:	4928      	ldr	r1, [pc, #160]	; (80004a8 <Uart_Parse_Command+0xd8>)
 8000406:	4824      	ldr	r0, [pc, #144]	; (8000498 <Uart_Parse_Command+0xc8>)
 8000408:	f000 f85a 	bl	80004c0 <Uart_StartsWith>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d00d      	beq.n	800042e <Uart_Parse_Command+0x5e>
	{
		Set_BLDC_Direction(BLDC_Direction_Right);
 8000412:	2001      	movs	r0, #1
 8000414:	f7ff ffae 	bl	8000374 <Set_BLDC_Direction>
		memcpy(Uart_Tx_Buffer, (uint8_t*)"DIRECTION_CHANGED\n", 18U);
 8000418:	2212      	movs	r2, #18
 800041a:	4920      	ldr	r1, [pc, #128]	; (800049c <Uart_Parse_Command+0xcc>)
 800041c:	4820      	ldr	r0, [pc, #128]	; (80004a0 <Uart_Parse_Command+0xd0>)
 800041e:	f005 f993 	bl	8005748 <memcpy>
		HAL_UART_Transmit_IT(&huart2, Uart_Tx_Buffer, 18U);
 8000422:	2212      	movs	r2, #18
 8000424:	491e      	ldr	r1, [pc, #120]	; (80004a0 <Uart_Parse_Command+0xd0>)
 8000426:	481f      	ldr	r0, [pc, #124]	; (80004a4 <Uart_Parse_Command+0xd4>)
 8000428:	f003 fe40 	bl	80040ac <HAL_UART_Transmit_IT>
 800042c:	e025      	b.n	800047a <Uart_Parse_Command+0xaa>
	}
	else if (true == Uart_StartsWith(Uart_Rx_Buffer, (uint8_t*)UART_COMMAND_BLDC_DAC_VAL, 13U))
 800042e:	220d      	movs	r2, #13
 8000430:	491e      	ldr	r1, [pc, #120]	; (80004ac <Uart_Parse_Command+0xdc>)
 8000432:	4819      	ldr	r0, [pc, #100]	; (8000498 <Uart_Parse_Command+0xc8>)
 8000434:	f000 f844 	bl	80004c0 <Uart_StartsWith>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d013      	beq.n	8000466 <Uart_Parse_Command+0x96>
	{
		int voltage = 0U;
 800043e:	2300      	movs	r3, #0
 8000440:	607b      	str	r3, [r7, #4]
		voltage = atoi((char*)&Uart_Rx_Buffer[13U]);
 8000442:	481b      	ldr	r0, [pc, #108]	; (80004b0 <Uart_Parse_Command+0xe0>)
 8000444:	f005 f938 	bl	80056b8 <atoi>
 8000448:	6078      	str	r0, [r7, #4]
		Set_DAC_Value(voltage);
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	f7ff ffb0 	bl	80003b0 <Set_DAC_Value>

		memcpy(Uart_Tx_Buffer, (uint8_t*)"DAC_VALUE_CHANGED\n", 18U);
 8000450:	2212      	movs	r2, #18
 8000452:	4918      	ldr	r1, [pc, #96]	; (80004b4 <Uart_Parse_Command+0xe4>)
 8000454:	4812      	ldr	r0, [pc, #72]	; (80004a0 <Uart_Parse_Command+0xd0>)
 8000456:	f005 f977 	bl	8005748 <memcpy>
		HAL_UART_Transmit_IT(&huart2, Uart_Tx_Buffer, 18U);
 800045a:	2212      	movs	r2, #18
 800045c:	4910      	ldr	r1, [pc, #64]	; (80004a0 <Uart_Parse_Command+0xd0>)
 800045e:	4811      	ldr	r0, [pc, #68]	; (80004a4 <Uart_Parse_Command+0xd4>)
 8000460:	f003 fe24 	bl	80040ac <HAL_UART_Transmit_IT>
 8000464:	e009      	b.n	800047a <Uart_Parse_Command+0xaa>
	}
	else
	{
		memcpy(Uart_Tx_Buffer, (uint8_t*)"UNRECOGNISED_COMMAND\n", 21U);
 8000466:	2215      	movs	r2, #21
 8000468:	4913      	ldr	r1, [pc, #76]	; (80004b8 <Uart_Parse_Command+0xe8>)
 800046a:	480d      	ldr	r0, [pc, #52]	; (80004a0 <Uart_Parse_Command+0xd0>)
 800046c:	f005 f96c 	bl	8005748 <memcpy>
		HAL_UART_Transmit_IT(&huart2, Uart_Tx_Buffer, 21U);
 8000470:	2215      	movs	r2, #21
 8000472:	490b      	ldr	r1, [pc, #44]	; (80004a0 <Uart_Parse_Command+0xd0>)
 8000474:	480b      	ldr	r0, [pc, #44]	; (80004a4 <Uart_Parse_Command+0xd4>)
 8000476:	f003 fe19 	bl	80040ac <HAL_UART_Transmit_IT>
	}

	memset(Uart_Rx_Buffer, 0, sizeof(Uart_Rx_Buffer));
 800047a:	2232      	movs	r2, #50	; 0x32
 800047c:	2100      	movs	r1, #0
 800047e:	4806      	ldr	r0, [pc, #24]	; (8000498 <Uart_Parse_Command+0xc8>)
 8000480:	f005 f970 	bl	8005764 <memset>
	Uart_Rx_Buffer_Counter = 0U;
 8000484:	4b0d      	ldr	r3, [pc, #52]	; (80004bc <Uart_Parse_Command+0xec>)
 8000486:	2200      	movs	r2, #0
 8000488:	701a      	strb	r2, [r3, #0]
}
 800048a:	bf00      	nop
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	08005950 	.word	0x08005950
 8000498:	200000a8 	.word	0x200000a8
 800049c:	08005964 	.word	0x08005964
 80004a0:	200000dc 	.word	0x200000dc
 80004a4:	200001f4 	.word	0x200001f4
 80004a8:	08005978 	.word	0x08005978
 80004ac:	08005990 	.word	0x08005990
 80004b0:	200000b5 	.word	0x200000b5
 80004b4:	080059a0 	.word	0x080059a0
 80004b8:	080059b4 	.word	0x080059b4
 80004bc:	200000da 	.word	0x200000da

080004c0 <Uart_StartsWith>:

static bool Uart_StartsWith(const uint8_t* str1, const uint8_t* str2, size_t size)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
	return strncmp((const char*) str1, (const char*) str2, size) == 0;
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	68b9      	ldr	r1, [r7, #8]
 80004d0:	68f8      	ldr	r0, [r7, #12]
 80004d2:	f005 f94f 	bl	8005774 <strncmp>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	bf0c      	ite	eq
 80004dc:	2301      	moveq	r3, #1
 80004de:	2300      	movne	r3, #0
 80004e0:	b2db      	uxtb	r3, r3
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	3710      	adds	r7, #16
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fc34 	bl	8000d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f830 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f7ff fed4 	bl	80002a4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80004fc:	f000 f9cc 	bl	8000898 <MX_TIM1_Init>
  MX_TIM16_Init();
 8000500:	f000 fa1e 	bl	8000940 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000504:	f000 fa66 	bl	80009d4 <MX_TIM17_Init>
  MX_USART3_UART_Init();
 8000508:	f000 fb48 	bl	8000b9c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800050c:	f000 fb16 	bl	8000b3c <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8000510:	f7ff fe60 	bl	80001d4 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  //TIM1->CCR1 = 50;
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  HAL_TIM_IC_Start_IT(&htim16, TIM_CHANNEL_1);
 8000514:	2100      	movs	r1, #0
 8000516:	480b      	ldr	r0, [pc, #44]	; (8000544 <main+0x58>)
 8000518:	f002 fe62 	bl	80031e0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim17);
 800051c:	480a      	ldr	r0, [pc, #40]	; (8000548 <main+0x5c>)
 800051e:	f002 fd8d 	bl	800303c <HAL_TIM_Base_Start_IT>

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000522:	2110      	movs	r1, #16
 8000524:	4809      	ldr	r0, [pc, #36]	; (800054c <main+0x60>)
 8000526:	f000 fdd7 	bl	80010d8 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 2048);
 800052a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800052e:	2200      	movs	r2, #0
 8000530:	2110      	movs	r1, #16
 8000532:	4806      	ldr	r0, [pc, #24]	; (800054c <main+0x60>)
 8000534:	f000 fdab 	bl	800108e <HAL_DAC_SetValue>

  HAL_UART_Receive_IT(&huart2, &Uart_Rx_Char, 1U);
 8000538:	2201      	movs	r2, #1
 800053a:	4905      	ldr	r1, [pc, #20]	; (8000550 <main+0x64>)
 800053c:	4805      	ldr	r0, [pc, #20]	; (8000554 <main+0x68>)
 800053e:	f003 fe13 	bl	8004168 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000542:	e7fe      	b.n	8000542 <main+0x56>
 8000544:	2000015c 	.word	0x2000015c
 8000548:	200001a8 	.word	0x200001a8
 800054c:	2000008c 	.word	0x2000008c
 8000550:	200000a4 	.word	0x200000a4
 8000554:	200001f4 	.word	0x200001f4

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b0a6      	sub	sp, #152	; 0x98
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000562:	2228      	movs	r2, #40	; 0x28
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f005 f8fc 	bl	8005764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2258      	movs	r2, #88	; 0x58
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f005 f8ee 	bl	8005764 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2310      	movs	r3, #16
 8000592:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005a4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 f840 	bl	800163c <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005c2:	f000 f8d3 	bl	800076c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2302      	movs	r3, #2
 80005cc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005d6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005e0:	2102      	movs	r1, #2
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 f87e 	bl	80026e4 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ee:	f000 f8bd 	bl	800076c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <SystemClock_Config+0xcc>)
 80005f4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM16
                              |RCC_PERIPHCLK_TIM17;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80005fe:	2300      	movs	r3, #0
 8000600:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000602:	2300      	movs	r3, #0
 8000604:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8000606:	2300      	movs	r3, #0
 8000608:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f002 fa9f 	bl	8002b50 <HAL_RCCEx_PeriphCLKConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000618:	f000 f8a8 	bl	800076c <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3798      	adds	r7, #152	; 0x98
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	01801006 	.word	0x01801006

08000628 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM16)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a06      	ldr	r2, [pc, #24]	; (8000650 <HAL_TIM_IC_CaptureCallback+0x28>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d104      	bne.n	8000644 <HAL_TIM_IC_CaptureCallback+0x1c>
	{
		Rising_Edges_Counter++;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_TIM_IC_CaptureCallback+0x2c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	3301      	adds	r3, #1
 8000640:	4a04      	ldr	r2, [pc, #16]	; (8000654 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8000642:	6013      	str	r3, [r2, #0]
	}
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	40014400 	.word	0x40014400
 8000654:	200000a0 	.word	0x200000a0

08000658 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM17)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a1e      	ldr	r2, [pc, #120]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d135      	bne.n	80006d6 <HAL_TIM_PeriodElapsedCallback+0x7e>
	{
		uint8_t local_counter = 0U;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]
		itoa(Rising_Edges_Counter, (char*)Uart_Tx_Buffer, 10);
 800066e:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	220a      	movs	r2, #10
 8000674:	491c      	ldr	r1, [pc, #112]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000676:	4618      	mov	r0, r3
 8000678:	f005 f864 	bl	8005744 <itoa>

		if (Rising_Edges_Counter != 0)
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d010      	beq.n	80006a6 <HAL_TIM_PeriodElapsedCallback+0x4e>
		{
			while(Rising_Edges_Counter > 0)
 8000684:	e00a      	b.n	800069c <HAL_TIM_PeriodElapsedCallback+0x44>
			{
				local_counter++;
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	3301      	adds	r3, #1
 800068a:	73fb      	strb	r3, [r7, #15]
				Rising_Edges_Counter /= 10;
 800068c:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a16      	ldr	r2, [pc, #88]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000692:	fba2 2303 	umull	r2, r3, r2, r3
 8000696:	08db      	lsrs	r3, r3, #3
 8000698:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800069a:	6013      	str	r3, [r2, #0]
			while(Rising_Edges_Counter > 0)
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1f0      	bne.n	8000686 <HAL_TIM_PeriodElapsedCallback+0x2e>
 80006a4:	e006      	b.n	80006b4 <HAL_TIM_PeriodElapsedCallback+0x5c>
			}
		}
		else
		{
			Uart_Tx_Buffer[local_counter] = '0';
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	4a0f      	ldr	r2, [pc, #60]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80006aa:	2130      	movs	r1, #48	; 0x30
 80006ac:	54d1      	strb	r1, [r2, r3]
			local_counter++;
 80006ae:	7bfb      	ldrb	r3, [r7, #15]
 80006b0:	3301      	adds	r3, #1
 80006b2:	73fb      	strb	r3, [r7, #15]
		}
		Uart_Tx_Buffer[local_counter] = '\n';
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	4a0c      	ldr	r2, [pc, #48]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80006b8:	210a      	movs	r1, #10
 80006ba:	54d1      	strb	r1, [r2, r3]
		local_counter++;
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	3301      	adds	r3, #1
 80006c0:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit_IT(&huart2, Uart_Tx_Buffer, local_counter);
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	461a      	mov	r2, r3
 80006c8:	4907      	ldr	r1, [pc, #28]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80006ca:	4809      	ldr	r0, [pc, #36]	; (80006f0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80006cc:	f003 fcee 	bl	80040ac <HAL_UART_Transmit_IT>
		Rising_Edges_Counter = 0;
 80006d0:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
	}
}
 80006d6:	bf00      	nop
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40014800 	.word	0x40014800
 80006e4:	200000a0 	.word	0x200000a0
 80006e8:	200000dc 	.word	0x200000dc
 80006ec:	cccccccd 	.word	0xcccccccd
 80006f0:	200001f4 	.word	0x200001f4

080006f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a15      	ldr	r2, [pc, #84]	; (8000758 <HAL_UART_RxCpltCallback+0x64>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d123      	bne.n	800074e <HAL_UART_RxCpltCallback+0x5a>
	{
		if (Uart_Rx_Buffer_Counter < UART_MAX_BUFFER_LENGTH)
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <HAL_UART_RxCpltCallback+0x68>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b31      	cmp	r3, #49	; 0x31
 800070c:	d817      	bhi.n	800073e <HAL_UART_RxCpltCallback+0x4a>
		{
			Uart_Rx_Buffer[Uart_Rx_Buffer_Counter] = Uart_Rx_Char;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <HAL_UART_RxCpltCallback+0x68>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <HAL_UART_RxCpltCallback+0x6c>)
 8000716:	7819      	ldrb	r1, [r3, #0]
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_UART_RxCpltCallback+0x70>)
 800071a:	5499      	strb	r1, [r3, r2]
			Uart_Rx_Buffer_Counter++;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <HAL_UART_RxCpltCallback+0x68>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	3301      	adds	r3, #1
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b0d      	ldr	r3, [pc, #52]	; (800075c <HAL_UART_RxCpltCallback+0x68>)
 8000726:	701a      	strb	r2, [r3, #0]

			if ((Uart_Rx_Char == '\n') || (Uart_Rx_Char == '\r'))
 8000728:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <HAL_UART_RxCpltCallback+0x6c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b0a      	cmp	r3, #10
 800072e:	d003      	beq.n	8000738 <HAL_UART_RxCpltCallback+0x44>
 8000730:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <HAL_UART_RxCpltCallback+0x6c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b0d      	cmp	r3, #13
 8000736:	d105      	bne.n	8000744 <HAL_UART_RxCpltCallback+0x50>
			{
				Uart_Parse_Command();
 8000738:	f7ff fe4a 	bl	80003d0 <Uart_Parse_Command>
 800073c:	e002      	b.n	8000744 <HAL_UART_RxCpltCallback+0x50>
			}
		}
		else
		{
			Uart_Rx_Buffer_Counter = 0;
 800073e:	4b07      	ldr	r3, [pc, #28]	; (800075c <HAL_UART_RxCpltCallback+0x68>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart2, &Uart_Rx_Char, 1U);
 8000744:	2201      	movs	r2, #1
 8000746:	4906      	ldr	r1, [pc, #24]	; (8000760 <HAL_UART_RxCpltCallback+0x6c>)
 8000748:	4807      	ldr	r0, [pc, #28]	; (8000768 <HAL_UART_RxCpltCallback+0x74>)
 800074a:	f003 fd0d 	bl	8004168 <HAL_UART_Receive_IT>
	}
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40004400 	.word	0x40004400
 800075c:	200000da 	.word	0x200000da
 8000760:	200000a4 	.word	0x200000a4
 8000764:	200000a8 	.word	0x200000a8
 8000768:	200001f4 	.word	0x200001f4

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000774:	e7fe      	b.n	8000774 <Error_Handler+0x8>
	...

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <HAL_MspInit+0x44>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	4a0e      	ldr	r2, [pc, #56]	; (80007bc <HAL_MspInit+0x44>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6193      	str	r3, [r2, #24]
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <HAL_MspInit+0x44>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <HAL_MspInit+0x44>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	4a08      	ldr	r2, [pc, #32]	; (80007bc <HAL_MspInit+0x44>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a0:	61d3      	str	r3, [r2, #28]
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HAL_MspInit+0x44>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007ae:	2007      	movs	r0, #7
 80007b0:	f000 fc0a 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40021000 	.word	0x40021000

080007c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <NMI_Handler+0x4>

080007c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <HardFault_Handler+0x4>

080007cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <MemManage_Handler+0x4>

080007d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <BusFault_Handler+0x4>

080007d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <UsageFault_Handler+0x4>

080007de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr

080007fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080c:	f000 faec 	bl	8000de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000818:	4803      	ldr	r0, [pc, #12]	; (8000828 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800081a:	f002 fe2b 	bl	8003474 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800081e:	4803      	ldr	r0, [pc, #12]	; (800082c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000820:	f002 fe28 	bl	8003474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000110 	.word	0x20000110
 800082c:	2000015c 	.word	0x2000015c

08000830 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000834:	4803      	ldr	r0, [pc, #12]	; (8000844 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8000836:	f002 fe1d 	bl	8003474 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800083a:	4803      	ldr	r0, [pc, #12]	; (8000848 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 800083c:	f002 fe1a 	bl	8003474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000110 	.word	0x20000110
 8000848:	200001a8 	.word	0x200001a8

0800084c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000850:	4802      	ldr	r0, [pc, #8]	; (800085c <USART2_IRQHandler+0x10>)
 8000852:	f003 fccd 	bl	80041f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200001f4 	.word	0x200001f4

08000860 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000864:	4802      	ldr	r0, [pc, #8]	; (8000870 <USART3_IRQHandler+0x10>)
 8000866:	f003 fcc3 	bl	80041f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000027c 	.word	0x2000027c

08000874 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <SystemInit+0x20>)
 800087a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800087e:	4a05      	ldr	r2, [pc, #20]	; (8000894 <SystemInit+0x20>)
 8000880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089e:	f107 0310 	add.w	r3, r7, #16
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008b6:	4b20      	ldr	r3, [pc, #128]	; (8000938 <MX_TIM1_Init+0xa0>)
 80008b8:	4a20      	ldr	r2, [pc, #128]	; (800093c <MX_TIM1_Init+0xa4>)
 80008ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80008bc:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <MX_TIM1_Init+0xa0>)
 80008be:	2247      	movs	r2, #71	; 0x47
 80008c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c2:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <MX_TIM1_Init+0xa0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000 - 1;
 80008c8:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <MX_TIM1_Init+0xa0>)
 80008ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d0:	4b19      	ldr	r3, [pc, #100]	; (8000938 <MX_TIM1_Init+0xa0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <MX_TIM1_Init+0xa0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008dc:	4b16      	ldr	r3, [pc, #88]	; (8000938 <MX_TIM1_Init+0xa0>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008e2:	4815      	ldr	r0, [pc, #84]	; (8000938 <MX_TIM1_Init+0xa0>)
 80008e4:	f002 fb52 	bl	8002f8c <HAL_TIM_Base_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80008ee:	f7ff ff3d 	bl	800076c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	4619      	mov	r1, r3
 80008fe:	480e      	ldr	r0, [pc, #56]	; (8000938 <MX_TIM1_Init+0xa0>)
 8000900:	f002 ff73 	bl	80037ea <HAL_TIM_ConfigClockSource>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800090a:	f7ff ff2f 	bl	800076c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_TIM1_Init+0xa0>)
 8000920:	f003 facc 	bl	8003ebc <HAL_TIMEx_MasterConfigSynchronization>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800092a:	f7ff ff1f 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000110 	.word	0x20000110
 800093c:	40012c00 	.word	0x40012c00

08000940 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000946:	463b      	mov	r3, r7
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000952:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <MX_TIM16_Init+0x8c>)
 8000954:	4a1e      	ldr	r2, [pc, #120]	; (80009d0 <MX_TIM16_Init+0x90>)
 8000956:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 72 - 1;
 8000958:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MX_TIM16_Init+0x8c>)
 800095a:	2247      	movs	r2, #71	; 0x47
 800095c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095e:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <MX_TIM16_Init+0x8c>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000964:	4b19      	ldr	r3, [pc, #100]	; (80009cc <MX_TIM16_Init+0x8c>)
 8000966:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800096a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096c:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_TIM16_Init+0x8c>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000972:	4b16      	ldr	r3, [pc, #88]	; (80009cc <MX_TIM16_Init+0x8c>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_TIM16_Init+0x8c>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800097e:	4813      	ldr	r0, [pc, #76]	; (80009cc <MX_TIM16_Init+0x8c>)
 8000980:	f002 fb04 	bl	8002f8c <HAL_TIM_Base_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 800098a:	f7ff feef 	bl	800076c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 800098e:	480f      	ldr	r0, [pc, #60]	; (80009cc <MX_TIM16_Init+0x8c>)
 8000990:	f002 fbc4 	bl	800311c <HAL_TIM_IC_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 800099a:	f7ff fee7 	bl	800076c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800099e:	2300      	movs	r3, #0
 80009a0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009a2:	2301      	movs	r3, #1
 80009a4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80009ae:	463b      	mov	r3, r7
 80009b0:	2200      	movs	r2, #0
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_TIM16_Init+0x8c>)
 80009b6:	f002 fe7c 	bl	80036b2 <HAL_TIM_IC_ConfigChannel>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 80009c0:	f7ff fed4 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	2000015c 	.word	0x2000015c
 80009d0:	40014400 	.word	0x40014400

080009d4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <MX_TIM17_Init+0x48>)
 80009da:	4a11      	ldr	r2, [pc, #68]	; (8000a20 <MX_TIM17_Init+0x4c>)
 80009dc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 7200 - 1;
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_TIM17_Init+0x48>)
 80009e0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80009e4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <MX_TIM17_Init+0x48>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10000 - 1;
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_TIM17_Init+0x48>)
 80009ee:	f242 720f 	movw	r2, #9999	; 0x270f
 80009f2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_TIM17_Init+0x48>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_TIM17_Init+0x48>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_TIM17_Init+0x48>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_TIM17_Init+0x48>)
 8000a08:	f002 fac0 	bl	8002f8c <HAL_TIM_Base_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8000a12:	f7ff feab 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200001a8 	.word	0x200001a8
 8000a20:	40014800 	.word	0x40014800

08000a24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	; 0x30
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a39      	ldr	r2, [pc, #228]	; (8000b28 <HAL_TIM_Base_MspInit+0x104>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d11c      	bne.n	8000a80 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a46:	4b39      	ldr	r3, [pc, #228]	; (8000b2c <HAL_TIM_Base_MspInit+0x108>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	4a38      	ldr	r2, [pc, #224]	; (8000b2c <HAL_TIM_Base_MspInit+0x108>)
 8000a4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a50:	6193      	str	r3, [r2, #24]
 8000a52:	4b36      	ldr	r3, [pc, #216]	; (8000b2c <HAL_TIM_Base_MspInit+0x108>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a5a:	61bb      	str	r3, [r7, #24]
 8000a5c:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	2019      	movs	r0, #25
 8000a64:	f000 fabb 	bl	8000fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a68:	2019      	movs	r0, #25
 8000a6a:	f000 fad4 	bl	8001016 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	201a      	movs	r0, #26
 8000a74:	f000 fab3 	bl	8000fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000a78:	201a      	movs	r0, #26
 8000a7a:	f000 facc 	bl	8001016 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000a7e:	e04e      	b.n	8000b1e <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM16)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a2a      	ldr	r2, [pc, #168]	; (8000b30 <HAL_TIM_Base_MspInit+0x10c>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d130      	bne.n	8000aec <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000a8a:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <HAL_TIM_Base_MspInit+0x108>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	4a27      	ldr	r2, [pc, #156]	; (8000b2c <HAL_TIM_Base_MspInit+0x108>)
 8000a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a94:	6193      	str	r3, [r2, #24]
 8000a96:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <HAL_TIM_Base_MspInit+0x108>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <HAL_TIM_Base_MspInit+0x108>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <HAL_TIM_Base_MspInit+0x108>)
 8000aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aac:	6153      	str	r3, [r2, #20]
 8000aae:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <HAL_TIM_Base_MspInit+0x108>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000aba:	2310      	movs	r3, #16
 8000abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8000aca:	2301      	movs	r3, #1
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4817      	ldr	r0, [pc, #92]	; (8000b34 <HAL_TIM_Base_MspInit+0x110>)
 8000ad6:	f000 fc0f 	bl	80012f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	2019      	movs	r0, #25
 8000ae0:	f000 fa7d 	bl	8000fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ae4:	2019      	movs	r0, #25
 8000ae6:	f000 fa96 	bl	8001016 <HAL_NVIC_EnableIRQ>
}
 8000aea:	e018      	b.n	8000b1e <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM17)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a11      	ldr	r2, [pc, #68]	; (8000b38 <HAL_TIM_Base_MspInit+0x114>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d113      	bne.n	8000b1e <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <HAL_TIM_Base_MspInit+0x108>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	4a0c      	ldr	r2, [pc, #48]	; (8000b2c <HAL_TIM_Base_MspInit+0x108>)
 8000afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b00:	6193      	str	r3, [r2, #24]
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <HAL_TIM_Base_MspInit+0x108>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	201a      	movs	r0, #26
 8000b14:	f000 fa63 	bl	8000fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000b18:	201a      	movs	r0, #26
 8000b1a:	f000 fa7c 	bl	8001016 <HAL_NVIC_EnableIRQ>
}
 8000b1e:	bf00      	nop
 8000b20:	3730      	adds	r7, #48	; 0x30
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40012c00 	.word	0x40012c00
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40014400 	.word	0x40014400
 8000b34:	48000400 	.word	0x48000400
 8000b38:	40014800 	.word	0x40014800

08000b3c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b42:	4a15      	ldr	r2, [pc, #84]	; (8000b98 <MX_USART2_UART_Init+0x5c>)
 8000b44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_USART2_UART_Init+0x58>)
 8000b80:	f003 fa46 	bl	8004010 <HAL_UART_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b8a:	f7ff fdef 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200001f4 	.word	0x200001f4
 8000b98:	40004400 	.word	0x40004400

08000b9c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_USART3_UART_Init+0x58>)
 8000ba2:	4a15      	ldr	r2, [pc, #84]	; (8000bf8 <MX_USART3_UART_Init+0x5c>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <MX_USART3_UART_Init+0x58>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_USART3_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_USART3_UART_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_USART3_UART_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_USART3_UART_Init+0x58>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <MX_USART3_UART_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_USART3_UART_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <MX_USART3_UART_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_USART3_UART_Init+0x58>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_USART3_UART_Init+0x58>)
 8000be0:	f003 fa16 	bl	8004010 <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000bea:	f7ff fdbf 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	2000027c 	.word	0x2000027c
 8000bf8:	40004800 	.word	0x40004800

08000bfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08c      	sub	sp, #48	; 0x30
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a37      	ldr	r2, [pc, #220]	; (8000cf8 <HAL_UART_MspInit+0xfc>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d131      	bne.n	8000c82 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c1e:	4b37      	ldr	r3, [pc, #220]	; (8000cfc <HAL_UART_MspInit+0x100>)
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	4a36      	ldr	r2, [pc, #216]	; (8000cfc <HAL_UART_MspInit+0x100>)
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c28:	61d3      	str	r3, [r2, #28]
 8000c2a:	4b34      	ldr	r3, [pc, #208]	; (8000cfc <HAL_UART_MspInit+0x100>)
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c32:	61bb      	str	r3, [r7, #24]
 8000c34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b31      	ldr	r3, [pc, #196]	; (8000cfc <HAL_UART_MspInit+0x100>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	4a30      	ldr	r2, [pc, #192]	; (8000cfc <HAL_UART_MspInit+0x100>)
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	6153      	str	r3, [r2, #20]
 8000c42:	4b2e      	ldr	r3, [pc, #184]	; (8000cfc <HAL_UART_MspInit+0x100>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c4e:	230c      	movs	r3, #12
 8000c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c5e:	2307      	movs	r3, #7
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	4619      	mov	r1, r3
 8000c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6c:	f000 fb44 	bl	80012f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2100      	movs	r1, #0
 8000c74:	2026      	movs	r0, #38	; 0x26
 8000c76:	f000 f9b2 	bl	8000fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c7a:	2026      	movs	r0, #38	; 0x26
 8000c7c:	f000 f9cb 	bl	8001016 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c80:	e035      	b.n	8000cee <HAL_UART_MspInit+0xf2>
  else if(uartHandle->Instance==USART3)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a1e      	ldr	r2, [pc, #120]	; (8000d00 <HAL_UART_MspInit+0x104>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d130      	bne.n	8000cee <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <HAL_UART_MspInit+0x100>)
 8000c8e:	69db      	ldr	r3, [r3, #28]
 8000c90:	4a1a      	ldr	r2, [pc, #104]	; (8000cfc <HAL_UART_MspInit+0x100>)
 8000c92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c96:	61d3      	str	r3, [r2, #28]
 8000c98:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <HAL_UART_MspInit+0x100>)
 8000c9a:	69db      	ldr	r3, [r3, #28]
 8000c9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <HAL_UART_MspInit+0x100>)
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	4a14      	ldr	r2, [pc, #80]	; (8000cfc <HAL_UART_MspInit+0x100>)
 8000caa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cae:	6153      	str	r3, [r2, #20]
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_UART_MspInit+0x100>)
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cbc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cce:	2307      	movs	r3, #7
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	480a      	ldr	r0, [pc, #40]	; (8000d04 <HAL_UART_MspInit+0x108>)
 8000cda:	f000 fb0d 	bl	80012f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2027      	movs	r0, #39	; 0x27
 8000ce4:	f000 f97b 	bl	8000fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ce8:	2027      	movs	r0, #39	; 0x27
 8000cea:	f000 f994 	bl	8001016 <HAL_NVIC_EnableIRQ>
}
 8000cee:	bf00      	nop
 8000cf0:	3730      	adds	r7, #48	; 0x30
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40004400 	.word	0x40004400
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40004800 	.word	0x40004800
 8000d04:	48000800 	.word	0x48000800

08000d08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d40 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d0c:	f7ff fdb2 	bl	8000874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d12:	490d      	ldr	r1, [pc, #52]	; (8000d48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <LoopForever+0xe>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d28:	4c0a      	ldr	r4, [pc, #40]	; (8000d54 <LoopForever+0x16>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d36:	f004 fcc9 	bl	80056cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d3a:	f7ff fbd7 	bl	80004ec <main>

08000d3e <LoopForever>:

LoopForever:
    b LoopForever
 8000d3e:	e7fe      	b.n	8000d3e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d40:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d4c:	08005b34 	.word	0x08005b34
  ldr r2, =_sbss
 8000d50:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d54:	20000308 	.word	0x20000308

08000d58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC1_2_IRQHandler>
	...

08000d5c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <HAL_Init+0x28>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <HAL_Init+0x28>)
 8000d66:	f043 0310 	orr.w	r3, r3, #16
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	f000 f92b 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d72:	2000      	movs	r0, #0
 8000d74:	f000 f808 	bl	8000d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d78:	f7ff fcfe 	bl	8000778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40022000 	.word	0x40022000

08000d88 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_InitTick+0x54>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_InitTick+0x58>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 f943 	bl	8001032 <HAL_SYSTICK_Config>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00e      	b.n	8000dd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b0f      	cmp	r3, #15
 8000dba:	d80a      	bhi.n	8000dd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc4:	f000 f90b 	bl	8000fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc8:	4a06      	ldr	r2, [pc, #24]	; (8000de4 <HAL_InitTick+0x5c>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e000      	b.n	8000dd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000004 	.word	0x20000004

08000de8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_IncTick+0x20>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_IncTick+0x24>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <HAL_IncTick+0x24>)
 8000dfa:	6013      	str	r3, [r2, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20000304 	.word	0x20000304

08000e10 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <HAL_GetTick+0x14>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000304 	.word	0x20000304

08000e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e44:	4013      	ands	r3, r2
 8000e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5a:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	60d3      	str	r3, [r2, #12]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <__NVIC_GetPriorityGrouping+0x18>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	f003 0307 	and.w	r3, r3, #7
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	db0b      	blt.n	8000eb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	f003 021f 	and.w	r2, r3, #31
 8000ea4:	4907      	ldr	r1, [pc, #28]	; (8000ec4 <__NVIC_EnableIRQ+0x38>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	095b      	lsrs	r3, r3, #5
 8000eac:	2001      	movs	r0, #1
 8000eae:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000e100 	.word	0xe000e100

08000ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db0a      	blt.n	8000ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	490c      	ldr	r1, [pc, #48]	; (8000f14 <__NVIC_SetPriority+0x4c>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	440b      	add	r3, r1
 8000eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef0:	e00a      	b.n	8000f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4908      	ldr	r1, [pc, #32]	; (8000f18 <__NVIC_SetPriority+0x50>)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	3b04      	subs	r3, #4
 8000f00:	0112      	lsls	r2, r2, #4
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	440b      	add	r3, r1
 8000f06:	761a      	strb	r2, [r3, #24]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f1c3 0307 	rsb	r3, r3, #7
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	bf28      	it	cs
 8000f3a:	2304      	movcs	r3, #4
 8000f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3304      	adds	r3, #4
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d902      	bls.n	8000f4c <NVIC_EncodePriority+0x30>
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3b03      	subs	r3, #3
 8000f4a:	e000      	b.n	8000f4e <NVIC_EncodePriority+0x32>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43d9      	mvns	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	4313      	orrs	r3, r2
         );
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3724      	adds	r7, #36	; 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f94:	d301      	bcc.n	8000f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00f      	b.n	8000fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <SysTick_Config+0x40>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f7ff ff8e 	bl	8000ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <SysTick_Config+0x40>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb2:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <SysTick_Config+0x40>)
 8000fb4:	2207      	movs	r2, #7
 8000fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	e000e010 	.word	0xe000e010

08000fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ff29 	bl	8000e28 <__NVIC_SetPriorityGrouping>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff0:	f7ff ff3e 	bl	8000e70 <__NVIC_GetPriorityGrouping>
 8000ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	6978      	ldr	r0, [r7, #20]
 8000ffc:	f7ff ff8e 	bl	8000f1c <NVIC_EncodePriority>
 8001000:	4602      	mov	r2, r0
 8001002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff5d 	bl	8000ec8 <__NVIC_SetPriority>
}
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff31 	bl	8000e8c <__NVIC_EnableIRQ>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ffa2 	bl	8000f84 <SysTick_Config>
 8001040:	4603      	mov	r3, r0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e014      	b.n	8001086 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	791b      	ldrb	r3, [r3, #4]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d105      	bne.n	8001072 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff f8db 	bl	8000228 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2202      	movs	r2, #2
 8001076:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2201      	movs	r2, #1
 8001082:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 800108e:	b480      	push	{r7}
 8001090:	b087      	sub	sp, #28
 8001092:	af00      	add	r7, sp, #0
 8001094:	60f8      	str	r0, [r7, #12]
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d105      	bne.n	80010b8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	3308      	adds	r3, #8
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	e004      	b.n	80010c2 <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	3314      	adds	r3, #20
 80010c0:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	461a      	mov	r2, r3
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	371c      	adds	r7, #28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	795b      	ldrb	r3, [r3, #5]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d101      	bne.n	80010ee <HAL_DAC_Start+0x16>
 80010ea:	2302      	movs	r3, #2
 80010ec:	e039      	b.n	8001162 <HAL_DAC_Start+0x8a>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2202      	movs	r2, #2
 80010f8:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6819      	ldr	r1, [r3, #0]
 8001100:	2201      	movs	r2, #1
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	409a      	lsls	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	430a      	orrs	r2, r1
 800110c:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d10f      	bne.n	8001134 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800111e:	2b3c      	cmp	r3, #60	; 0x3c
 8001120:	d118      	bne.n	8001154 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f042 0201 	orr.w	r2, r2, #1
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	e00f      	b.n	8001154 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800113e:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8001142:	d107      	bne.n	8001154 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 0202 	orr.w	r2, r2, #2
 8001152:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2201      	movs	r2, #1
 8001158:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800116e:	b480      	push	{r7}
 8001170:	b087      	sub	sp, #28
 8001172:	af00      	add	r7, sp, #0
 8001174:	60f8      	str	r0, [r7, #12]
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	795b      	ldrb	r3, [r3, #5]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d101      	bne.n	800118e <HAL_DAC_ConfigChannel+0x20>
 800118a:	2302      	movs	r3, #2
 800118c:	e036      	b.n	80011fc <HAL_DAC_ConfigChannel+0x8e>
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2201      	movs	r2, #1
 8001192:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2202      	movs	r2, #2
 8001198:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80011a2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	4013      	ands	r3, r2
 80011b2:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	697a      	ldr	r2, [r7, #20]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	6819      	ldr	r1, [r3, #0]
 80011dc:	22c0      	movs	r2, #192	; 0xc0
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43da      	mvns	r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	400a      	ands	r2, r1
 80011ec:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2201      	movs	r2, #1
 80011f2:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2200      	movs	r2, #0
 80011f8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	371c      	adds	r7, #28
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001216:	2b02      	cmp	r3, #2
 8001218:	d008      	beq.n	800122c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2204      	movs	r2, #4
 800121e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e020      	b.n	800126e <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 020e 	bic.w	r2, r2, #14
 800123a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0201 	bic.w	r2, r2, #1
 800124a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001254:	2101      	movs	r1, #1
 8001256:	fa01 f202 	lsl.w	r2, r1, r2
 800125a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800127a:	b580      	push	{r7, lr}
 800127c:	b084      	sub	sp, #16
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800128c:	2b02      	cmp	r3, #2
 800128e:	d005      	beq.n	800129c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2204      	movs	r2, #4
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	73fb      	strb	r3, [r7, #15]
 800129a:	e027      	b.n	80012ec <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 020e 	bic.w	r2, r2, #14
 80012aa:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0201 	bic.w	r2, r2, #1
 80012ba:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c4:	2101      	movs	r1, #1
 80012c6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ca:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	4798      	blx	r3
    } 
  }
  return status;
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001306:	e160      	b.n	80015ca <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	2101      	movs	r1, #1
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	fa01 f303 	lsl.w	r3, r1, r3
 8001314:	4013      	ands	r3, r2
 8001316:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 8152 	beq.w	80015c4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b01      	cmp	r3, #1
 800132a:	d005      	beq.n	8001338 <HAL_GPIO_Init+0x40>
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d130      	bne.n	800139a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	2203      	movs	r2, #3
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800136e:	2201      	movs	r2, #1
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	091b      	lsrs	r3, r3, #4
 8001384:	f003 0201 	and.w	r2, r3, #1
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d017      	beq.n	80013d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	2203      	movs	r2, #3
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d123      	bne.n	800142a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	08da      	lsrs	r2, r3, #3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3208      	adds	r2, #8
 80013ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	220f      	movs	r2, #15
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	691a      	ldr	r2, [r3, #16]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	08da      	lsrs	r2, r3, #3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3208      	adds	r2, #8
 8001424:	6939      	ldr	r1, [r7, #16]
 8001426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	2203      	movs	r2, #3
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4013      	ands	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 0203 	and.w	r2, r3, #3
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 80ac 	beq.w	80015c4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146c:	4b5e      	ldr	r3, [pc, #376]	; (80015e8 <HAL_GPIO_Init+0x2f0>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	4a5d      	ldr	r2, [pc, #372]	; (80015e8 <HAL_GPIO_Init+0x2f0>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6193      	str	r3, [r2, #24]
 8001478:	4b5b      	ldr	r3, [pc, #364]	; (80015e8 <HAL_GPIO_Init+0x2f0>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001484:	4a59      	ldr	r2, [pc, #356]	; (80015ec <HAL_GPIO_Init+0x2f4>)
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	089b      	lsrs	r3, r3, #2
 800148a:	3302      	adds	r3, #2
 800148c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	220f      	movs	r2, #15
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014ae:	d025      	beq.n	80014fc <HAL_GPIO_Init+0x204>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a4f      	ldr	r2, [pc, #316]	; (80015f0 <HAL_GPIO_Init+0x2f8>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d01f      	beq.n	80014f8 <HAL_GPIO_Init+0x200>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a4e      	ldr	r2, [pc, #312]	; (80015f4 <HAL_GPIO_Init+0x2fc>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d019      	beq.n	80014f4 <HAL_GPIO_Init+0x1fc>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a4d      	ldr	r2, [pc, #308]	; (80015f8 <HAL_GPIO_Init+0x300>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d013      	beq.n	80014f0 <HAL_GPIO_Init+0x1f8>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a4c      	ldr	r2, [pc, #304]	; (80015fc <HAL_GPIO_Init+0x304>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d00d      	beq.n	80014ec <HAL_GPIO_Init+0x1f4>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a4b      	ldr	r2, [pc, #300]	; (8001600 <HAL_GPIO_Init+0x308>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d007      	beq.n	80014e8 <HAL_GPIO_Init+0x1f0>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a4a      	ldr	r2, [pc, #296]	; (8001604 <HAL_GPIO_Init+0x30c>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d101      	bne.n	80014e4 <HAL_GPIO_Init+0x1ec>
 80014e0:	2306      	movs	r3, #6
 80014e2:	e00c      	b.n	80014fe <HAL_GPIO_Init+0x206>
 80014e4:	2307      	movs	r3, #7
 80014e6:	e00a      	b.n	80014fe <HAL_GPIO_Init+0x206>
 80014e8:	2305      	movs	r3, #5
 80014ea:	e008      	b.n	80014fe <HAL_GPIO_Init+0x206>
 80014ec:	2304      	movs	r3, #4
 80014ee:	e006      	b.n	80014fe <HAL_GPIO_Init+0x206>
 80014f0:	2303      	movs	r3, #3
 80014f2:	e004      	b.n	80014fe <HAL_GPIO_Init+0x206>
 80014f4:	2302      	movs	r3, #2
 80014f6:	e002      	b.n	80014fe <HAL_GPIO_Init+0x206>
 80014f8:	2301      	movs	r3, #1
 80014fa:	e000      	b.n	80014fe <HAL_GPIO_Init+0x206>
 80014fc:	2300      	movs	r3, #0
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	f002 0203 	and.w	r2, r2, #3
 8001504:	0092      	lsls	r2, r2, #2
 8001506:	4093      	lsls	r3, r2
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4313      	orrs	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800150e:	4937      	ldr	r1, [pc, #220]	; (80015ec <HAL_GPIO_Init+0x2f4>)
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	089b      	lsrs	r3, r3, #2
 8001514:	3302      	adds	r3, #2
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800151c:	4b3a      	ldr	r3, [pc, #232]	; (8001608 <HAL_GPIO_Init+0x310>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	43db      	mvns	r3, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001540:	4a31      	ldr	r2, [pc, #196]	; (8001608 <HAL_GPIO_Init+0x310>)
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001546:	4b30      	ldr	r3, [pc, #192]	; (8001608 <HAL_GPIO_Init+0x310>)
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	43db      	mvns	r3, r3
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4013      	ands	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4313      	orrs	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800156a:	4a27      	ldr	r2, [pc, #156]	; (8001608 <HAL_GPIO_Init+0x310>)
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001570:	4b25      	ldr	r3, [pc, #148]	; (8001608 <HAL_GPIO_Init+0x310>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	43db      	mvns	r3, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001594:	4a1c      	ldr	r2, [pc, #112]	; (8001608 <HAL_GPIO_Init+0x310>)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <HAL_GPIO_Init+0x310>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4013      	ands	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015be:	4a12      	ldr	r2, [pc, #72]	; (8001608 <HAL_GPIO_Init+0x310>)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3301      	adds	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	fa22 f303 	lsr.w	r3, r2, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f47f ae97 	bne.w	8001308 <HAL_GPIO_Init+0x10>
  }
}
 80015da:	bf00      	nop
 80015dc:	bf00      	nop
 80015de:	371c      	adds	r7, #28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40010000 	.word	0x40010000
 80015f0:	48000400 	.word	0x48000400
 80015f4:	48000800 	.word	0x48000800
 80015f8:	48000c00 	.word	0x48000c00
 80015fc:	48001000 	.word	0x48001000
 8001600:	48001400 	.word	0x48001400
 8001604:	48001800 	.word	0x48001800
 8001608:	40010400 	.word	0x40010400

0800160c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	807b      	strh	r3, [r7, #2]
 8001618:	4613      	mov	r3, r2
 800161a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800161c:	787b      	ldrb	r3, [r7, #1]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001622:	887a      	ldrh	r2, [r7, #2]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001628:	e002      	b.n	8001630 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800162a:	887a      	ldrh	r2, [r7, #2]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001642:	af00      	add	r7, sp, #0
 8001644:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001648:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800164c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800164e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001652:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	f001 b83a 	b.w	80026d6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001662:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001666:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 816f 	beq.w	8001956 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001678:	4bb5      	ldr	r3, [pc, #724]	; (8001950 <HAL_RCC_OscConfig+0x314>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 030c 	and.w	r3, r3, #12
 8001680:	2b04      	cmp	r3, #4
 8001682:	d00c      	beq.n	800169e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001684:	4bb2      	ldr	r3, [pc, #712]	; (8001950 <HAL_RCC_OscConfig+0x314>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 030c 	and.w	r3, r3, #12
 800168c:	2b08      	cmp	r3, #8
 800168e:	d15c      	bne.n	800174a <HAL_RCC_OscConfig+0x10e>
 8001690:	4baf      	ldr	r3, [pc, #700]	; (8001950 <HAL_RCC_OscConfig+0x314>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800169c:	d155      	bne.n	800174a <HAL_RCC_OscConfig+0x10e>
 800169e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016a2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80016aa:	fa93 f3a3 	rbit	r3, r3
 80016ae:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016b2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b6:	fab3 f383 	clz	r3, r3
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	095b      	lsrs	r3, r3, #5
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d102      	bne.n	80016d0 <HAL_RCC_OscConfig+0x94>
 80016ca:	4ba1      	ldr	r3, [pc, #644]	; (8001950 <HAL_RCC_OscConfig+0x314>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	e015      	b.n	80016fc <HAL_RCC_OscConfig+0xc0>
 80016d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80016dc:	fa93 f3a3 	rbit	r3, r3
 80016e0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80016e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016e8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80016ec:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80016f0:	fa93 f3a3 	rbit	r3, r3
 80016f4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80016f8:	4b95      	ldr	r3, [pc, #596]	; (8001950 <HAL_RCC_OscConfig+0x314>)
 80016fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001700:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001704:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001708:	fa92 f2a2 	rbit	r2, r2
 800170c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001710:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001714:	fab2 f282 	clz	r2, r2
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	f042 0220 	orr.w	r2, r2, #32
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	f002 021f 	and.w	r2, r2, #31
 8001724:	2101      	movs	r1, #1
 8001726:	fa01 f202 	lsl.w	r2, r1, r2
 800172a:	4013      	ands	r3, r2
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 8111 	beq.w	8001954 <HAL_RCC_OscConfig+0x318>
 8001732:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001736:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	f040 8108 	bne.w	8001954 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	f000 bfc6 	b.w	80026d6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800174a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800174e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800175a:	d106      	bne.n	800176a <HAL_RCC_OscConfig+0x12e>
 800175c:	4b7c      	ldr	r3, [pc, #496]	; (8001950 <HAL_RCC_OscConfig+0x314>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a7b      	ldr	r2, [pc, #492]	; (8001950 <HAL_RCC_OscConfig+0x314>)
 8001762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	e036      	b.n	80017d8 <HAL_RCC_OscConfig+0x19c>
 800176a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800176e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0x158>
 800177a:	4b75      	ldr	r3, [pc, #468]	; (8001950 <HAL_RCC_OscConfig+0x314>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a74      	ldr	r2, [pc, #464]	; (8001950 <HAL_RCC_OscConfig+0x314>)
 8001780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4b72      	ldr	r3, [pc, #456]	; (8001950 <HAL_RCC_OscConfig+0x314>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a71      	ldr	r2, [pc, #452]	; (8001950 <HAL_RCC_OscConfig+0x314>)
 800178c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e021      	b.n	80017d8 <HAL_RCC_OscConfig+0x19c>
 8001794:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001798:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a4:	d10c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x184>
 80017a6:	4b6a      	ldr	r3, [pc, #424]	; (8001950 <HAL_RCC_OscConfig+0x314>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a69      	ldr	r2, [pc, #420]	; (8001950 <HAL_RCC_OscConfig+0x314>)
 80017ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	4b67      	ldr	r3, [pc, #412]	; (8001950 <HAL_RCC_OscConfig+0x314>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a66      	ldr	r2, [pc, #408]	; (8001950 <HAL_RCC_OscConfig+0x314>)
 80017b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e00b      	b.n	80017d8 <HAL_RCC_OscConfig+0x19c>
 80017c0:	4b63      	ldr	r3, [pc, #396]	; (8001950 <HAL_RCC_OscConfig+0x314>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a62      	ldr	r2, [pc, #392]	; (8001950 <HAL_RCC_OscConfig+0x314>)
 80017c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b60      	ldr	r3, [pc, #384]	; (8001950 <HAL_RCC_OscConfig+0x314>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a5f      	ldr	r2, [pc, #380]	; (8001950 <HAL_RCC_OscConfig+0x314>)
 80017d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d059      	beq.n	800189c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fb12 	bl	8000e10 <HAL_GetTick>
 80017ec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f0:	e00a      	b.n	8001808 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f2:	f7ff fb0d 	bl	8000e10 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b64      	cmp	r3, #100	; 0x64
 8001800:	d902      	bls.n	8001808 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	f000 bf67 	b.w	80026d6 <HAL_RCC_OscConfig+0x109a>
 8001808:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800180c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001810:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001814:	fa93 f3a3 	rbit	r3, r3
 8001818:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800181c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001820:	fab3 f383 	clz	r3, r3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	b2db      	uxtb	r3, r3
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b01      	cmp	r3, #1
 8001832:	d102      	bne.n	800183a <HAL_RCC_OscConfig+0x1fe>
 8001834:	4b46      	ldr	r3, [pc, #280]	; (8001950 <HAL_RCC_OscConfig+0x314>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	e015      	b.n	8001866 <HAL_RCC_OscConfig+0x22a>
 800183a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800183e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001842:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001846:	fa93 f3a3 	rbit	r3, r3
 800184a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800184e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001852:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001856:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800185a:	fa93 f3a3 	rbit	r3, r3
 800185e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001862:	4b3b      	ldr	r3, [pc, #236]	; (8001950 <HAL_RCC_OscConfig+0x314>)
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800186a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800186e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001872:	fa92 f2a2 	rbit	r2, r2
 8001876:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800187a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800187e:	fab2 f282 	clz	r2, r2
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	f042 0220 	orr.w	r2, r2, #32
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	f002 021f 	and.w	r2, r2, #31
 800188e:	2101      	movs	r1, #1
 8001890:	fa01 f202 	lsl.w	r2, r1, r2
 8001894:	4013      	ands	r3, r2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0ab      	beq.n	80017f2 <HAL_RCC_OscConfig+0x1b6>
 800189a:	e05c      	b.n	8001956 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189c:	f7ff fab8 	bl	8000e10 <HAL_GetTick>
 80018a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a4:	e00a      	b.n	80018bc <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018a6:	f7ff fab3 	bl	8000e10 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	; 0x64
 80018b4:	d902      	bls.n	80018bc <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	f000 bf0d 	b.w	80026d6 <HAL_RCC_OscConfig+0x109a>
 80018bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018c0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80018c8:	fa93 f3a3 	rbit	r3, r3
 80018cc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80018d0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d4:	fab3 f383 	clz	r3, r3
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d102      	bne.n	80018ee <HAL_RCC_OscConfig+0x2b2>
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HAL_RCC_OscConfig+0x314>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	e015      	b.n	800191a <HAL_RCC_OscConfig+0x2de>
 80018ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018f2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80018fa:	fa93 f3a3 	rbit	r3, r3
 80018fe:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001902:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001906:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800190a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800190e:	fa93 f3a3 	rbit	r3, r3
 8001912:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <HAL_RCC_OscConfig+0x314>)
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800191e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001922:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001926:	fa92 f2a2 	rbit	r2, r2
 800192a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800192e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001932:	fab2 f282 	clz	r2, r2
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	f042 0220 	orr.w	r2, r2, #32
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	f002 021f 	and.w	r2, r2, #31
 8001942:	2101      	movs	r1, #1
 8001944:	fa01 f202 	lsl.w	r2, r1, r2
 8001948:	4013      	ands	r3, r2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1ab      	bne.n	80018a6 <HAL_RCC_OscConfig+0x26a>
 800194e:	e002      	b.n	8001956 <HAL_RCC_OscConfig+0x31a>
 8001950:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001956:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 817f 	beq.w	8001c6a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800196c:	4ba7      	ldr	r3, [pc, #668]	; (8001c0c <HAL_RCC_OscConfig+0x5d0>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 030c 	and.w	r3, r3, #12
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00c      	beq.n	8001992 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001978:	4ba4      	ldr	r3, [pc, #656]	; (8001c0c <HAL_RCC_OscConfig+0x5d0>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 030c 	and.w	r3, r3, #12
 8001980:	2b08      	cmp	r3, #8
 8001982:	d173      	bne.n	8001a6c <HAL_RCC_OscConfig+0x430>
 8001984:	4ba1      	ldr	r3, [pc, #644]	; (8001c0c <HAL_RCC_OscConfig+0x5d0>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800198c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001990:	d16c      	bne.n	8001a6c <HAL_RCC_OscConfig+0x430>
 8001992:	2302      	movs	r3, #2
 8001994:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001998:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800199c:	fa93 f3a3 	rbit	r3, r3
 80019a0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80019a4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a8:	fab3 f383 	clz	r3, r3
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	095b      	lsrs	r3, r3, #5
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d102      	bne.n	80019c2 <HAL_RCC_OscConfig+0x386>
 80019bc:	4b93      	ldr	r3, [pc, #588]	; (8001c0c <HAL_RCC_OscConfig+0x5d0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	e013      	b.n	80019ea <HAL_RCC_OscConfig+0x3ae>
 80019c2:	2302      	movs	r3, #2
 80019c4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80019cc:	fa93 f3a3 	rbit	r3, r3
 80019d0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80019d4:	2302      	movs	r3, #2
 80019d6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80019da:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80019de:	fa93 f3a3 	rbit	r3, r3
 80019e2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80019e6:	4b89      	ldr	r3, [pc, #548]	; (8001c0c <HAL_RCC_OscConfig+0x5d0>)
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	2202      	movs	r2, #2
 80019ec:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80019f0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80019f4:	fa92 f2a2 	rbit	r2, r2
 80019f8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80019fc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a00:	fab2 f282 	clz	r2, r2
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	f042 0220 	orr.w	r2, r2, #32
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	f002 021f 	and.w	r2, r2, #31
 8001a10:	2101      	movs	r1, #1
 8001a12:	fa01 f202 	lsl.w	r2, r1, r2
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00a      	beq.n	8001a32 <HAL_RCC_OscConfig+0x3f6>
 8001a1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d002      	beq.n	8001a32 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	f000 be52 	b.w	80026d6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a32:	4b76      	ldr	r3, [pc, #472]	; (8001c0c <HAL_RCC_OscConfig+0x5d0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	21f8      	movs	r1, #248	; 0xf8
 8001a48:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001a50:	fa91 f1a1 	rbit	r1, r1
 8001a54:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001a58:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a5c:	fab1 f181 	clz	r1, r1
 8001a60:	b2c9      	uxtb	r1, r1
 8001a62:	408b      	lsls	r3, r1
 8001a64:	4969      	ldr	r1, [pc, #420]	; (8001c0c <HAL_RCC_OscConfig+0x5d0>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6a:	e0fe      	b.n	8001c6a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 8088 	beq.w	8001b8e <HAL_RCC_OscConfig+0x552>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a84:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001a88:	fa93 f3a3 	rbit	r3, r3
 8001a8c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001a90:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a94:	fab3 f383 	clz	r3, r3
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a9e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aaa:	f7ff f9b1 	bl	8000e10 <HAL_GetTick>
 8001aae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab2:	e00a      	b.n	8001aca <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ab4:	f7ff f9ac 	bl	8000e10 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d902      	bls.n	8001aca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	f000 be06 	b.w	80026d6 <HAL_RCC_OscConfig+0x109a>
 8001aca:	2302      	movs	r3, #2
 8001acc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001ad4:	fa93 f3a3 	rbit	r3, r3
 8001ad8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001adc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae0:	fab3 f383 	clz	r3, r3
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	095b      	lsrs	r3, r3, #5
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d102      	bne.n	8001afa <HAL_RCC_OscConfig+0x4be>
 8001af4:	4b45      	ldr	r3, [pc, #276]	; (8001c0c <HAL_RCC_OscConfig+0x5d0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	e013      	b.n	8001b22 <HAL_RCC_OscConfig+0x4e6>
 8001afa:	2302      	movs	r3, #2
 8001afc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b00:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001b04:	fa93 f3a3 	rbit	r3, r3
 8001b08:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b12:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001b16:	fa93 f3a3 	rbit	r3, r3
 8001b1a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b1e:	4b3b      	ldr	r3, [pc, #236]	; (8001c0c <HAL_RCC_OscConfig+0x5d0>)
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	2202      	movs	r2, #2
 8001b24:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001b28:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001b2c:	fa92 f2a2 	rbit	r2, r2
 8001b30:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001b34:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b38:	fab2 f282 	clz	r2, r2
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	f042 0220 	orr.w	r2, r2, #32
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	f002 021f 	and.w	r2, r2, #31
 8001b48:	2101      	movs	r1, #1
 8001b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0af      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b54:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <HAL_RCC_OscConfig+0x5d0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	21f8      	movs	r1, #248	; 0xf8
 8001b6a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001b72:	fa91 f1a1 	rbit	r1, r1
 8001b76:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001b7a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b7e:	fab1 f181 	clz	r1, r1
 8001b82:	b2c9      	uxtb	r1, r1
 8001b84:	408b      	lsls	r3, r1
 8001b86:	4921      	ldr	r1, [pc, #132]	; (8001c0c <HAL_RCC_OscConfig+0x5d0>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	600b      	str	r3, [r1, #0]
 8001b8c:	e06d      	b.n	8001c6a <HAL_RCC_OscConfig+0x62e>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001ba0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba4:	fab3 f383 	clz	r3, r3
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bba:	f7ff f929 	bl	8000e10 <HAL_GetTick>
 8001bbe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc2:	e00a      	b.n	8001bda <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc4:	f7ff f924 	bl	8000e10 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d902      	bls.n	8001bda <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	f000 bd7e 	b.w	80026d6 <HAL_RCC_OscConfig+0x109a>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001be4:	fa93 f3a3 	rbit	r3, r3
 8001be8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001bec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf0:	fab3 f383 	clz	r3, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	095b      	lsrs	r3, r3, #5
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d105      	bne.n	8001c10 <HAL_RCC_OscConfig+0x5d4>
 8001c04:	4b01      	ldr	r3, [pc, #4]	; (8001c0c <HAL_RCC_OscConfig+0x5d0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	e016      	b.n	8001c38 <HAL_RCC_OscConfig+0x5fc>
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	2302      	movs	r3, #2
 8001c12:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001c22:	2302      	movs	r3, #2
 8001c24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c28:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001c2c:	fa93 f3a3 	rbit	r3, r3
 8001c30:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c34:	4bbf      	ldr	r3, [pc, #764]	; (8001f34 <HAL_RCC_OscConfig+0x8f8>)
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	2202      	movs	r2, #2
 8001c3a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001c3e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001c42:	fa92 f2a2 	rbit	r2, r2
 8001c46:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001c4a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c4e:	fab2 f282 	clz	r2, r2
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	f042 0220 	orr.w	r2, r2, #32
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	f002 021f 	and.w	r2, r2, #31
 8001c5e:	2101      	movs	r1, #1
 8001c60:	fa01 f202 	lsl.w	r2, r1, r2
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1ac      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 8113 	beq.w	8001ea6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c84:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d07c      	beq.n	8001d8a <HAL_RCC_OscConfig+0x74e>
 8001c90:	2301      	movs	r3, #1
 8001c92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c9a:	fa93 f3a3 	rbit	r3, r3
 8001c9e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001ca2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	4ba2      	ldr	r3, [pc, #648]	; (8001f38 <HAL_RCC_OscConfig+0x8fc>)
 8001cb0:	4413      	add	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cba:	f7ff f8a9 	bl	8000e10 <HAL_GetTick>
 8001cbe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc2:	e00a      	b.n	8001cda <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc4:	f7ff f8a4 	bl	8000e10 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d902      	bls.n	8001cda <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	f000 bcfe 	b.w	80026d6 <HAL_RCC_OscConfig+0x109a>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ce4:	fa93 f2a3 	rbit	r2, r3
 8001ce8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	fa93 f2a3 	rbit	r2, r3
 8001d0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d1e:	2202      	movs	r2, #2
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	fa93 f2a3 	rbit	r2, r3
 8001d30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d38:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3a:	4b7e      	ldr	r3, [pc, #504]	; (8001f34 <HAL_RCC_OscConfig+0x8f8>)
 8001d3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d42:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d46:	2102      	movs	r1, #2
 8001d48:	6019      	str	r1, [r3, #0]
 8001d4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	fa93 f1a3 	rbit	r1, r3
 8001d58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d5c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d60:	6019      	str	r1, [r3, #0]
  return result;
 8001d62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d66:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	fab3 f383 	clz	r3, r3
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	f003 031f 	and.w	r3, r3, #31
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	4013      	ands	r3, r2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d09d      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x688>
 8001d88:	e08d      	b.n	8001ea6 <HAL_RCC_OscConfig+0x86a>
 8001d8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d92:	2201      	movs	r2, #1
 8001d94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d9a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	fa93 f2a3 	rbit	r2, r3
 8001da4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001dac:	601a      	str	r2, [r3, #0]
  return result;
 8001dae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001db6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db8:	fab3 f383 	clz	r3, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	4b5d      	ldr	r3, [pc, #372]	; (8001f38 <HAL_RCC_OscConfig+0x8fc>)
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	2300      	movs	r3, #0
 8001dca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dcc:	f7ff f820 	bl	8000e10 <HAL_GetTick>
 8001dd0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd4:	e00a      	b.n	8001dec <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dd6:	f7ff f81b 	bl	8000e10 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d902      	bls.n	8001dec <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	f000 bc75 	b.w	80026d6 <HAL_RCC_OscConfig+0x109a>
 8001dec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001df4:	2202      	movs	r2, #2
 8001df6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	fa93 f2a3 	rbit	r2, r3
 8001e06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e0a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e18:	2202      	movs	r2, #2
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	fa93 f2a3 	rbit	r2, r3
 8001e2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e38:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e44:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	fa93 f2a3 	rbit	r2, r3
 8001e4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e52:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001e56:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e58:	4b36      	ldr	r3, [pc, #216]	; (8001f34 <HAL_RCC_OscConfig+0x8f8>)
 8001e5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e60:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e64:	2102      	movs	r1, #2
 8001e66:	6019      	str	r1, [r3, #0]
 8001e68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e6c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	fa93 f1a3 	rbit	r1, r3
 8001e76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e7e:	6019      	str	r1, [r3, #0]
  return result;
 8001e80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e84:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d197      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eaa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 81a5 	beq.w	8002206 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec2:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <HAL_RCC_OscConfig+0x8f8>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d116      	bne.n	8001efc <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ece:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_RCC_OscConfig+0x8f8>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	4a18      	ldr	r2, [pc, #96]	; (8001f34 <HAL_RCC_OscConfig+0x8f8>)
 8001ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	61d3      	str	r3, [r2, #28]
 8001eda:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <HAL_RCC_OscConfig+0x8f8>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001ee2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ef4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efc:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <HAL_RCC_OscConfig+0x900>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d121      	bne.n	8001f4c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <HAL_RCC_OscConfig+0x900>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0b      	ldr	r2, [pc, #44]	; (8001f3c <HAL_RCC_OscConfig+0x900>)
 8001f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f12:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f14:	f7fe ff7c 	bl	8000e10 <HAL_GetTick>
 8001f18:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	e010      	b.n	8001f40 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1e:	f7fe ff77 	bl	8000e10 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b64      	cmp	r3, #100	; 0x64
 8001f2c:	d908      	bls.n	8001f40 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e3d1      	b.n	80026d6 <HAL_RCC_OscConfig+0x109a>
 8001f32:	bf00      	nop
 8001f34:	40021000 	.word	0x40021000
 8001f38:	10908120 	.word	0x10908120
 8001f3c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f40:	4b8d      	ldr	r3, [pc, #564]	; (8002178 <HAL_RCC_OscConfig+0xb3c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0e8      	beq.n	8001f1e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f50:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d106      	bne.n	8001f6a <HAL_RCC_OscConfig+0x92e>
 8001f5c:	4b87      	ldr	r3, [pc, #540]	; (800217c <HAL_RCC_OscConfig+0xb40>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	4a86      	ldr	r2, [pc, #536]	; (800217c <HAL_RCC_OscConfig+0xb40>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6213      	str	r3, [r2, #32]
 8001f68:	e035      	b.n	8001fd6 <HAL_RCC_OscConfig+0x99a>
 8001f6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10c      	bne.n	8001f94 <HAL_RCC_OscConfig+0x958>
 8001f7a:	4b80      	ldr	r3, [pc, #512]	; (800217c <HAL_RCC_OscConfig+0xb40>)
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	4a7f      	ldr	r2, [pc, #508]	; (800217c <HAL_RCC_OscConfig+0xb40>)
 8001f80:	f023 0301 	bic.w	r3, r3, #1
 8001f84:	6213      	str	r3, [r2, #32]
 8001f86:	4b7d      	ldr	r3, [pc, #500]	; (800217c <HAL_RCC_OscConfig+0xb40>)
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	4a7c      	ldr	r2, [pc, #496]	; (800217c <HAL_RCC_OscConfig+0xb40>)
 8001f8c:	f023 0304 	bic.w	r3, r3, #4
 8001f90:	6213      	str	r3, [r2, #32]
 8001f92:	e020      	b.n	8001fd6 <HAL_RCC_OscConfig+0x99a>
 8001f94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b05      	cmp	r3, #5
 8001fa2:	d10c      	bne.n	8001fbe <HAL_RCC_OscConfig+0x982>
 8001fa4:	4b75      	ldr	r3, [pc, #468]	; (800217c <HAL_RCC_OscConfig+0xb40>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	4a74      	ldr	r2, [pc, #464]	; (800217c <HAL_RCC_OscConfig+0xb40>)
 8001faa:	f043 0304 	orr.w	r3, r3, #4
 8001fae:	6213      	str	r3, [r2, #32]
 8001fb0:	4b72      	ldr	r3, [pc, #456]	; (800217c <HAL_RCC_OscConfig+0xb40>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4a71      	ldr	r2, [pc, #452]	; (800217c <HAL_RCC_OscConfig+0xb40>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6213      	str	r3, [r2, #32]
 8001fbc:	e00b      	b.n	8001fd6 <HAL_RCC_OscConfig+0x99a>
 8001fbe:	4b6f      	ldr	r3, [pc, #444]	; (800217c <HAL_RCC_OscConfig+0xb40>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	4a6e      	ldr	r2, [pc, #440]	; (800217c <HAL_RCC_OscConfig+0xb40>)
 8001fc4:	f023 0301 	bic.w	r3, r3, #1
 8001fc8:	6213      	str	r3, [r2, #32]
 8001fca:	4b6c      	ldr	r3, [pc, #432]	; (800217c <HAL_RCC_OscConfig+0xb40>)
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	4a6b      	ldr	r2, [pc, #428]	; (800217c <HAL_RCC_OscConfig+0xb40>)
 8001fd0:	f023 0304 	bic.w	r3, r3, #4
 8001fd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fda:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 8081 	beq.w	80020ea <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe8:	f7fe ff12 	bl	8000e10 <HAL_GetTick>
 8001fec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff0:	e00b      	b.n	800200a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f7fe ff0d 	bl	8000e10 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002002:	4293      	cmp	r3, r2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e365      	b.n	80026d6 <HAL_RCC_OscConfig+0x109a>
 800200a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800200e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002012:	2202      	movs	r2, #2
 8002014:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800201a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	fa93 f2a3 	rbit	r2, r3
 8002024:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002028:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002032:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002036:	2202      	movs	r2, #2
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800203e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	fa93 f2a3 	rbit	r2, r3
 8002048:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002050:	601a      	str	r2, [r3, #0]
  return result;
 8002052:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002056:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800205a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205c:	fab3 f383 	clz	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	b2db      	uxtb	r3, r3
 8002066:	f043 0302 	orr.w	r3, r3, #2
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d102      	bne.n	8002076 <HAL_RCC_OscConfig+0xa3a>
 8002070:	4b42      	ldr	r3, [pc, #264]	; (800217c <HAL_RCC_OscConfig+0xb40>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	e013      	b.n	800209e <HAL_RCC_OscConfig+0xa62>
 8002076:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800207a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800207e:	2202      	movs	r2, #2
 8002080:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002086:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	fa93 f2a3 	rbit	r2, r3
 8002090:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002094:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	4b38      	ldr	r3, [pc, #224]	; (800217c <HAL_RCC_OscConfig+0xb40>)
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020a2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80020a6:	2102      	movs	r1, #2
 80020a8:	6011      	str	r1, [r2, #0]
 80020aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020ae:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	fa92 f1a2 	rbit	r1, r2
 80020b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020bc:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80020c0:	6011      	str	r1, [r2, #0]
  return result;
 80020c2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020c6:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	fab2 f282 	clz	r2, r2
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	f002 021f 	and.w	r2, r2, #31
 80020dc:	2101      	movs	r1, #1
 80020de:	fa01 f202 	lsl.w	r2, r1, r2
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d084      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x9b6>
 80020e8:	e083      	b.n	80021f2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ea:	f7fe fe91 	bl	8000e10 <HAL_GetTick>
 80020ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f2:	e00b      	b.n	800210c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f4:	f7fe fe8c 	bl	8000e10 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	f241 3288 	movw	r2, #5000	; 0x1388
 8002104:	4293      	cmp	r3, r2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e2e4      	b.n	80026d6 <HAL_RCC_OscConfig+0x109a>
 800210c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002110:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002114:	2202      	movs	r2, #2
 8002116:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800211c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	fa93 f2a3 	rbit	r2, r3
 8002126:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002134:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002138:	2202      	movs	r2, #2
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002140:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	fa93 f2a3 	rbit	r2, r3
 800214a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800214e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002152:	601a      	str	r2, [r3, #0]
  return result;
 8002154:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002158:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800215c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	095b      	lsrs	r3, r3, #5
 8002166:	b2db      	uxtb	r3, r3
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d106      	bne.n	8002180 <HAL_RCC_OscConfig+0xb44>
 8002172:	4b02      	ldr	r3, [pc, #8]	; (800217c <HAL_RCC_OscConfig+0xb40>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	e017      	b.n	80021a8 <HAL_RCC_OscConfig+0xb6c>
 8002178:	40007000 	.word	0x40007000
 800217c:	40021000 	.word	0x40021000
 8002180:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002184:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002188:	2202      	movs	r2, #2
 800218a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002190:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	fa93 f2a3 	rbit	r2, r3
 800219a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800219e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	4bb3      	ldr	r3, [pc, #716]	; (8002474 <HAL_RCC_OscConfig+0xe38>)
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021ac:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80021b0:	2102      	movs	r1, #2
 80021b2:	6011      	str	r1, [r2, #0]
 80021b4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021b8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	fa92 f1a2 	rbit	r1, r2
 80021c2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021c6:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80021ca:	6011      	str	r1, [r2, #0]
  return result;
 80021cc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021d0:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	fab2 f282 	clz	r2, r2
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	f002 021f 	and.w	r2, r2, #31
 80021e6:	2101      	movs	r1, #1
 80021e8:	fa01 f202 	lsl.w	r2, r1, r2
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d180      	bne.n	80020f4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021f2:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d105      	bne.n	8002206 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fa:	4b9e      	ldr	r3, [pc, #632]	; (8002474 <HAL_RCC_OscConfig+0xe38>)
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	4a9d      	ldr	r2, [pc, #628]	; (8002474 <HAL_RCC_OscConfig+0xe38>)
 8002200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002204:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002206:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800220a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 825e 	beq.w	80026d4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002218:	4b96      	ldr	r3, [pc, #600]	; (8002474 <HAL_RCC_OscConfig+0xe38>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 030c 	and.w	r3, r3, #12
 8002220:	2b08      	cmp	r3, #8
 8002222:	f000 821f 	beq.w	8002664 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002226:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800222a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	2b02      	cmp	r3, #2
 8002234:	f040 8170 	bne.w	8002518 <HAL_RCC_OscConfig+0xedc>
 8002238:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800223c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002240:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002244:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800224a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	fa93 f2a3 	rbit	r2, r3
 8002254:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002258:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800225c:	601a      	str	r2, [r3, #0]
  return result;
 800225e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002262:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002266:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002268:	fab3 f383 	clz	r3, r3
 800226c:	b2db      	uxtb	r3, r3
 800226e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002272:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	461a      	mov	r2, r3
 800227a:	2300      	movs	r3, #0
 800227c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227e:	f7fe fdc7 	bl	8000e10 <HAL_GetTick>
 8002282:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002286:	e009      	b.n	800229c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002288:	f7fe fdc2 	bl	8000e10 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e21c      	b.n	80026d6 <HAL_RCC_OscConfig+0x109a>
 800229c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80022a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ae:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	fa93 f2a3 	rbit	r2, r3
 80022b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022bc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80022c0:	601a      	str	r2, [r3, #0]
  return result;
 80022c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022c6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80022ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022cc:	fab3 f383 	clz	r3, r3
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	095b      	lsrs	r3, r3, #5
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d102      	bne.n	80022e6 <HAL_RCC_OscConfig+0xcaa>
 80022e0:	4b64      	ldr	r3, [pc, #400]	; (8002474 <HAL_RCC_OscConfig+0xe38>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	e027      	b.n	8002336 <HAL_RCC_OscConfig+0xcfa>
 80022e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ea:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80022ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	fa93 f2a3 	rbit	r2, r3
 8002302:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002306:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002310:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002314:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800231e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	fa93 f2a3 	rbit	r2, r3
 8002328:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800232c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	4b50      	ldr	r3, [pc, #320]	; (8002474 <HAL_RCC_OscConfig+0xe38>)
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800233a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800233e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002342:	6011      	str	r1, [r2, #0]
 8002344:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002348:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	fa92 f1a2 	rbit	r1, r2
 8002352:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002356:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800235a:	6011      	str	r1, [r2, #0]
  return result;
 800235c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002360:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002364:	6812      	ldr	r2, [r2, #0]
 8002366:	fab2 f282 	clz	r2, r2
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	f042 0220 	orr.w	r2, r2, #32
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	f002 021f 	and.w	r2, r2, #31
 8002376:	2101      	movs	r1, #1
 8002378:	fa01 f202 	lsl.w	r2, r1, r2
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d182      	bne.n	8002288 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002382:	4b3c      	ldr	r3, [pc, #240]	; (8002474 <HAL_RCC_OscConfig+0xe38>)
 8002384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002386:	f023 020f 	bic.w	r2, r3, #15
 800238a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800238e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	4937      	ldr	r1, [pc, #220]	; (8002474 <HAL_RCC_OscConfig+0xe38>)
 8002398:	4313      	orrs	r3, r2
 800239a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800239c:	4b35      	ldr	r3, [pc, #212]	; (8002474 <HAL_RCC_OscConfig+0xe38>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80023a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6a19      	ldr	r1, [r3, #32]
 80023b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	430b      	orrs	r3, r1
 80023be:	492d      	ldr	r1, [pc, #180]	; (8002474 <HAL_RCC_OscConfig+0xe38>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]
 80023c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80023cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	fa93 f2a3 	rbit	r2, r3
 80023e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80023e8:	601a      	str	r2, [r3, #0]
  return result;
 80023ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ee:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80023f2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f4:	fab3 f383 	clz	r3, r3
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	461a      	mov	r2, r3
 8002406:	2301      	movs	r3, #1
 8002408:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7fe fd01 	bl	8000e10 <HAL_GetTick>
 800240e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002412:	e009      	b.n	8002428 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002414:	f7fe fcfc 	bl	8000e10 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e156      	b.n	80026d6 <HAL_RCC_OscConfig+0x109a>
 8002428:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800242c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002430:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002434:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800243a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	fa93 f2a3 	rbit	r2, r3
 8002444:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002448:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800244c:	601a      	str	r2, [r3, #0]
  return result;
 800244e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002452:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002456:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002458:	fab3 f383 	clz	r3, r3
 800245c:	b2db      	uxtb	r3, r3
 800245e:	095b      	lsrs	r3, r3, #5
 8002460:	b2db      	uxtb	r3, r3
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b01      	cmp	r3, #1
 800246a:	d105      	bne.n	8002478 <HAL_RCC_OscConfig+0xe3c>
 800246c:	4b01      	ldr	r3, [pc, #4]	; (8002474 <HAL_RCC_OscConfig+0xe38>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	e02a      	b.n	80024c8 <HAL_RCC_OscConfig+0xe8c>
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000
 8002478:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800247c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002480:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002484:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800248a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	fa93 f2a3 	rbit	r2, r3
 8002494:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002498:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024a2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80024a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	fa93 f2a3 	rbit	r2, r3
 80024ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024be:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	4b86      	ldr	r3, [pc, #536]	; (80026e0 <HAL_RCC_OscConfig+0x10a4>)
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024cc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80024d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024d4:	6011      	str	r1, [r2, #0]
 80024d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024da:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	fa92 f1a2 	rbit	r1, r2
 80024e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024e8:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80024ec:	6011      	str	r1, [r2, #0]
  return result;
 80024ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024f2:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	fab2 f282 	clz	r2, r2
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	f042 0220 	orr.w	r2, r2, #32
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	f002 021f 	and.w	r2, r2, #31
 8002508:	2101      	movs	r1, #1
 800250a:	fa01 f202 	lsl.w	r2, r1, r2
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	f43f af7f 	beq.w	8002414 <HAL_RCC_OscConfig+0xdd8>
 8002516:	e0dd      	b.n	80026d4 <HAL_RCC_OscConfig+0x1098>
 8002518:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800251c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002520:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002524:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002526:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800252a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	fa93 f2a3 	rbit	r2, r3
 8002534:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002538:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800253c:	601a      	str	r2, [r3, #0]
  return result;
 800253e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002542:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002546:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	b2db      	uxtb	r3, r3
 800254e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002552:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	461a      	mov	r2, r3
 800255a:	2300      	movs	r3, #0
 800255c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7fe fc57 	bl	8000e10 <HAL_GetTick>
 8002562:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002566:	e009      	b.n	800257c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002568:	f7fe fc52 	bl	8000e10 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e0ac      	b.n	80026d6 <HAL_RCC_OscConfig+0x109a>
 800257c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002580:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002584:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002588:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800258e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	fa93 f2a3 	rbit	r2, r3
 8002598:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800259c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80025a0:	601a      	str	r2, [r3, #0]
  return result;
 80025a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025a6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80025aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ac:	fab3 f383 	clz	r3, r3
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d102      	bne.n	80025c6 <HAL_RCC_OscConfig+0xf8a>
 80025c0:	4b47      	ldr	r3, [pc, #284]	; (80026e0 <HAL_RCC_OscConfig+0x10a4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	e027      	b.n	8002616 <HAL_RCC_OscConfig+0xfda>
 80025c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ca:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80025ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025d8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	fa93 f2a3 	rbit	r2, r3
 80025e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025f0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80025f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025fe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	fa93 f2a3 	rbit	r2, r3
 8002608:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800260c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	4b33      	ldr	r3, [pc, #204]	; (80026e0 <HAL_RCC_OscConfig+0x10a4>)
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800261a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800261e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002622:	6011      	str	r1, [r2, #0]
 8002624:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002628:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	fa92 f1a2 	rbit	r1, r2
 8002632:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002636:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800263a:	6011      	str	r1, [r2, #0]
  return result;
 800263c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002640:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	fab2 f282 	clz	r2, r2
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	f042 0220 	orr.w	r2, r2, #32
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	f002 021f 	and.w	r2, r2, #31
 8002656:	2101      	movs	r1, #1
 8002658:	fa01 f202 	lsl.w	r2, r1, r2
 800265c:	4013      	ands	r3, r2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d182      	bne.n	8002568 <HAL_RCC_OscConfig+0xf2c>
 8002662:	e037      	b.n	80026d4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002664:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002668:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e02e      	b.n	80026d6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002678:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <HAL_RCC_OscConfig+0x10a4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002680:	4b17      	ldr	r3, [pc, #92]	; (80026e0 <HAL_RCC_OscConfig+0x10a4>)
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002684:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002688:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800268c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002690:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002694:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	429a      	cmp	r2, r3
 800269e:	d117      	bne.n	80026d0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80026a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80026a4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d10b      	bne.n	80026d0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80026b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026bc:	f003 020f 	and.w	r2, r3, #15
 80026c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40021000 	.word	0x40021000

080026e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b09e      	sub	sp, #120	; 0x78
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e162      	b.n	80029c2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026fc:	4b90      	ldr	r3, [pc, #576]	; (8002940 <HAL_RCC_ClockConfig+0x25c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d910      	bls.n	800272c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270a:	4b8d      	ldr	r3, [pc, #564]	; (8002940 <HAL_RCC_ClockConfig+0x25c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 0207 	bic.w	r2, r3, #7
 8002712:	498b      	ldr	r1, [pc, #556]	; (8002940 <HAL_RCC_ClockConfig+0x25c>)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	4313      	orrs	r3, r2
 8002718:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800271a:	4b89      	ldr	r3, [pc, #548]	; (8002940 <HAL_RCC_ClockConfig+0x25c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e14a      	b.n	80029c2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002738:	4b82      	ldr	r3, [pc, #520]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	497f      	ldr	r1, [pc, #508]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 8002746:	4313      	orrs	r3, r2
 8002748:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 80dc 	beq.w	8002910 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d13c      	bne.n	80027da <HAL_RCC_ClockConfig+0xf6>
 8002760:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002764:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002768:	fa93 f3a3 	rbit	r3, r3
 800276c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800276e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d102      	bne.n	800278a <HAL_RCC_ClockConfig+0xa6>
 8002784:	4b6f      	ldr	r3, [pc, #444]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	e00f      	b.n	80027aa <HAL_RCC_ClockConfig+0xc6>
 800278a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800278e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	667b      	str	r3, [r7, #100]	; 0x64
 8002798:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800279c:	663b      	str	r3, [r7, #96]	; 0x60
 800279e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027a6:	4b67      	ldr	r3, [pc, #412]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80027b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027b2:	fa92 f2a2 	rbit	r2, r2
 80027b6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80027b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027ba:	fab2 f282 	clz	r2, r2
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	f042 0220 	orr.w	r2, r2, #32
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	f002 021f 	and.w	r2, r2, #31
 80027ca:	2101      	movs	r1, #1
 80027cc:	fa01 f202 	lsl.w	r2, r1, r2
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d17b      	bne.n	80028ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e0f3      	b.n	80029c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d13c      	bne.n	800285c <HAL_RCC_ClockConfig+0x178>
 80027e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ea:	fa93 f3a3 	rbit	r3, r3
 80027ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f2:	fab3 f383 	clz	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d102      	bne.n	800280c <HAL_RCC_ClockConfig+0x128>
 8002806:	4b4f      	ldr	r3, [pc, #316]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	e00f      	b.n	800282c <HAL_RCC_ClockConfig+0x148>
 800280c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002810:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	647b      	str	r3, [r7, #68]	; 0x44
 800281a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800281e:	643b      	str	r3, [r7, #64]	; 0x40
 8002820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002828:	4b46      	ldr	r3, [pc, #280]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002830:	63ba      	str	r2, [r7, #56]	; 0x38
 8002832:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002834:	fa92 f2a2 	rbit	r2, r2
 8002838:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800283a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800283c:	fab2 f282 	clz	r2, r2
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	f042 0220 	orr.w	r2, r2, #32
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	f002 021f 	and.w	r2, r2, #31
 800284c:	2101      	movs	r1, #1
 800284e:	fa01 f202 	lsl.w	r2, r1, r2
 8002852:	4013      	ands	r3, r2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d13a      	bne.n	80028ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e0b2      	b.n	80029c2 <HAL_RCC_ClockConfig+0x2de>
 800285c:	2302      	movs	r3, #2
 800285e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002862:	fa93 f3a3 	rbit	r3, r3
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286a:	fab3 f383 	clz	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	095b      	lsrs	r3, r3, #5
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b01      	cmp	r3, #1
 800287c:	d102      	bne.n	8002884 <HAL_RCC_ClockConfig+0x1a0>
 800287e:	4b31      	ldr	r3, [pc, #196]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	e00d      	b.n	80028a0 <HAL_RCC_ClockConfig+0x1bc>
 8002884:	2302      	movs	r3, #2
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
 8002890:	2302      	movs	r3, #2
 8002892:	623b      	str	r3, [r7, #32]
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	61fb      	str	r3, [r7, #28]
 800289c:	4b29      	ldr	r3, [pc, #164]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	2202      	movs	r2, #2
 80028a2:	61ba      	str	r2, [r7, #24]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	fa92 f2a2 	rbit	r2, r2
 80028aa:	617a      	str	r2, [r7, #20]
  return result;
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	fab2 f282 	clz	r2, r2
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	f042 0220 	orr.w	r2, r2, #32
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	f002 021f 	and.w	r2, r2, #31
 80028be:	2101      	movs	r1, #1
 80028c0:	fa01 f202 	lsl.w	r2, r1, r2
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e079      	b.n	80029c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ce:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f023 0203 	bic.w	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	491a      	ldr	r1, [pc, #104]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028e0:	f7fe fa96 	bl	8000e10 <HAL_GetTick>
 80028e4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	e00a      	b.n	80028fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e8:	f7fe fa92 	bl	8000e10 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e061      	b.n	80029c2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fe:	4b11      	ldr	r3, [pc, #68]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f003 020c 	and.w	r2, r3, #12
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	429a      	cmp	r2, r3
 800290e:	d1eb      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <HAL_RCC_ClockConfig+0x25c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d214      	bcs.n	8002948 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291e:	4b08      	ldr	r3, [pc, #32]	; (8002940 <HAL_RCC_ClockConfig+0x25c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 0207 	bic.w	r2, r3, #7
 8002926:	4906      	ldr	r1, [pc, #24]	; (8002940 <HAL_RCC_ClockConfig+0x25c>)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	4313      	orrs	r3, r2
 800292c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800292e:	4b04      	ldr	r3, [pc, #16]	; (8002940 <HAL_RCC_ClockConfig+0x25c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d005      	beq.n	8002948 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e040      	b.n	80029c2 <HAL_RCC_ClockConfig+0x2de>
 8002940:	40022000 	.word	0x40022000
 8002944:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002954:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <HAL_RCC_ClockConfig+0x2e8>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	491a      	ldr	r1, [pc, #104]	; (80029cc <HAL_RCC_ClockConfig+0x2e8>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002972:	4b16      	ldr	r3, [pc, #88]	; (80029cc <HAL_RCC_ClockConfig+0x2e8>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4912      	ldr	r1, [pc, #72]	; (80029cc <HAL_RCC_ClockConfig+0x2e8>)
 8002982:	4313      	orrs	r3, r2
 8002984:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002986:	f000 f829 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 800298a:	4601      	mov	r1, r0
 800298c:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <HAL_RCC_ClockConfig+0x2e8>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002994:	22f0      	movs	r2, #240	; 0xf0
 8002996:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	fa92 f2a2 	rbit	r2, r2
 800299e:	60fa      	str	r2, [r7, #12]
  return result;
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	fab2 f282 	clz	r2, r2
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	40d3      	lsrs	r3, r2
 80029aa:	4a09      	ldr	r2, [pc, #36]	; (80029d0 <HAL_RCC_ClockConfig+0x2ec>)
 80029ac:	5cd3      	ldrb	r3, [r2, r3]
 80029ae:	fa21 f303 	lsr.w	r3, r1, r3
 80029b2:	4a08      	ldr	r2, [pc, #32]	; (80029d4 <HAL_RCC_ClockConfig+0x2f0>)
 80029b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80029b6:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <HAL_RCC_ClockConfig+0x2f4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe f9e4 	bl	8000d88 <HAL_InitTick>
  
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3778      	adds	r7, #120	; 0x78
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40021000 	.word	0x40021000
 80029d0:	080059cc 	.word	0x080059cc
 80029d4:	20000000 	.word	0x20000000
 80029d8:	20000004 	.word	0x20000004

080029dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	b08b      	sub	sp, #44	; 0x2c
 80029e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	2300      	movs	r3, #0
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	2300      	movs	r3, #0
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80029f6:	4b2a      	ldr	r3, [pc, #168]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d002      	beq.n	8002a0c <HAL_RCC_GetSysClockFreq+0x30>
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d003      	beq.n	8002a12 <HAL_RCC_GetSysClockFreq+0x36>
 8002a0a:	e03f      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a0c:	4b25      	ldr	r3, [pc, #148]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a0e:	623b      	str	r3, [r7, #32]
      break;
 8002a10:	e03f      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a18:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a1c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	fa92 f2a2 	rbit	r2, r2
 8002a24:	607a      	str	r2, [r7, #4]
  return result;
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	fab2 f282 	clz	r2, r2
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	40d3      	lsrs	r3, r2
 8002a30:	4a1d      	ldr	r2, [pc, #116]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a32:	5cd3      	ldrb	r3, [r2, r3]
 8002a34:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a36:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	220f      	movs	r2, #15
 8002a40:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	fa92 f2a2 	rbit	r2, r2
 8002a48:	60fa      	str	r2, [r7, #12]
  return result;
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	fab2 f282 	clz	r2, r2
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	40d3      	lsrs	r3, r2
 8002a54:	4a15      	ldr	r2, [pc, #84]	; (8002aac <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a56:	5cd3      	ldrb	r3, [r2, r3]
 8002a58:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a64:	4a0f      	ldr	r2, [pc, #60]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	fb02 f303 	mul.w	r3, r2, r3
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
 8002a74:	e007      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a76:	4a0b      	ldr	r2, [pc, #44]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	fb02 f303 	mul.w	r3, r2, r3
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	623b      	str	r3, [r7, #32]
      break;
 8002a8a:	e002      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a8e:	623b      	str	r3, [r7, #32]
      break;
 8002a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a92:	6a3b      	ldr	r3, [r7, #32]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	372c      	adds	r7, #44	; 0x2c
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	007a1200 	.word	0x007a1200
 8002aa8:	080059e4 	.word	0x080059e4
 8002aac:	080059f4 	.word	0x080059f4

08002ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab4:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	20000000 	.word	0x20000000

08002ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002ace:	f7ff ffef 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8002ad2:	4601      	mov	r1, r0
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002adc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ae0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	fa92 f2a2 	rbit	r2, r2
 8002ae8:	603a      	str	r2, [r7, #0]
  return result;
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	fab2 f282 	clz	r2, r2
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	40d3      	lsrs	r3, r2
 8002af4:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002af6:	5cd3      	ldrb	r3, [r2, r3]
 8002af8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002afc:	4618      	mov	r0, r3
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40021000 	.word	0x40021000
 8002b08:	080059dc 	.word	0x080059dc

08002b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b12:	f7ff ffcd 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8002b16:	4601      	mov	r1, r0
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002b20:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002b24:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	fa92 f2a2 	rbit	r2, r2
 8002b2c:	603a      	str	r2, [r7, #0]
  return result;
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	fab2 f282 	clz	r2, r2
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	40d3      	lsrs	r3, r2
 8002b38:	4a04      	ldr	r2, [pc, #16]	; (8002b4c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b3a:	5cd3      	ldrb	r3, [r2, r3]
 8002b3c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b40:	4618      	mov	r0, r3
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	080059dc 	.word	0x080059dc

08002b50 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b092      	sub	sp, #72	; 0x48
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002b60:	2300      	movs	r3, #0
 8002b62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 80d4 	beq.w	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b74:	4b4e      	ldr	r3, [pc, #312]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10e      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b80:	4b4b      	ldr	r3, [pc, #300]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	4a4a      	ldr	r2, [pc, #296]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	61d3      	str	r3, [r2, #28]
 8002b8c:	4b48      	ldr	r3, [pc, #288]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9e:	4b45      	ldr	r3, [pc, #276]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d118      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002baa:	4b42      	ldr	r3, [pc, #264]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a41      	ldr	r2, [pc, #260]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb6:	f7fe f92b 	bl	8000e10 <HAL_GetTick>
 8002bba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bbe:	f7fe f927 	bl	8000e10 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b64      	cmp	r3, #100	; 0x64
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e1d6      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd0:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bdc:	4b34      	ldr	r3, [pc, #208]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 8084 	beq.w	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d07c      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bfc:	4b2c      	ldr	r3, [pc, #176]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b26      	ldr	r3, [pc, #152]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	461a      	mov	r2, r3
 8002c26:	2301      	movs	r3, #1
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c32:	fa93 f3a3 	rbit	r3, r3
 8002c36:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c3a:	fab3 f383 	clz	r3, r3
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c44:	4413      	add	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	461a      	mov	r2, r3
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c4e:	4a18      	ldr	r2, [pc, #96]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c52:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d04b      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5e:	f7fe f8d7 	bl	8000e10 <HAL_GetTick>
 8002c62:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c64:	e00a      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c66:	f7fe f8d3 	bl	8000e10 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e180      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24
 8002c88:	2302      	movs	r3, #2
 8002c8a:	623b      	str	r3, [r7, #32]
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	61fb      	str	r3, [r7, #28]
  return result;
 8002c94:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c96:	fab3 f383 	clz	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	095b      	lsrs	r3, r3, #5
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	f043 0302 	orr.w	r3, r3, #2
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d108      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002caa:	4b01      	ldr	r3, [pc, #4]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	e00d      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40007000 	.word	0x40007000
 8002cb8:	10908100 	.word	0x10908100
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	fa93 f3a3 	rbit	r3, r3
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	4b9a      	ldr	r3, [pc, #616]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	2202      	movs	r2, #2
 8002cce:	613a      	str	r2, [r7, #16]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	fa92 f2a2 	rbit	r2, r2
 8002cd6:	60fa      	str	r2, [r7, #12]
  return result;
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	fab2 f282 	clz	r2, r2
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	f002 021f 	and.w	r2, r2, #31
 8002cea:	2101      	movs	r1, #1
 8002cec:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0b7      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002cf6:	4b8f      	ldr	r3, [pc, #572]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	498c      	ldr	r1, [pc, #560]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d105      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d10:	4b88      	ldr	r3, [pc, #544]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	4a87      	ldr	r2, [pc, #540]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d28:	4b82      	ldr	r3, [pc, #520]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	f023 0203 	bic.w	r2, r3, #3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	497f      	ldr	r1, [pc, #508]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d008      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d46:	4b7b      	ldr	r3, [pc, #492]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	4978      	ldr	r1, [pc, #480]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d64:	4b73      	ldr	r3, [pc, #460]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	4970      	ldr	r1, [pc, #448]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d008      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d82:	4b6c      	ldr	r3, [pc, #432]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	f023 0210 	bic.w	r2, r3, #16
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	4969      	ldr	r1, [pc, #420]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002da0:	4b64      	ldr	r3, [pc, #400]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dac:	4961      	ldr	r1, [pc, #388]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d008      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dbe:	4b5d      	ldr	r3, [pc, #372]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f023 0220 	bic.w	r2, r3, #32
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	495a      	ldr	r1, [pc, #360]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ddc:	4b55      	ldr	r3, [pc, #340]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	4952      	ldr	r1, [pc, #328]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d008      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dfa:	4b4e      	ldr	r3, [pc, #312]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	494b      	ldr	r1, [pc, #300]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0310 	and.w	r3, r3, #16
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e18:	4b46      	ldr	r3, [pc, #280]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	4943      	ldr	r1, [pc, #268]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d008      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e36:	4b3f      	ldr	r3, [pc, #252]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	493c      	ldr	r1, [pc, #240]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d008      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e54:	4b37      	ldr	r3, [pc, #220]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e58:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	4934      	ldr	r1, [pc, #208]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d008      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002e72:	4b30      	ldr	r3, [pc, #192]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7e:	492d      	ldr	r1, [pc, #180]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d008      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e90:	4b28      	ldr	r3, [pc, #160]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9c:	4925      	ldr	r1, [pc, #148]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d008      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002eae:	4b21      	ldr	r3, [pc, #132]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	491e      	ldr	r1, [pc, #120]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002ecc:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed8:	4916      	ldr	r1, [pc, #88]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d008      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002eea:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef6:	490f      	ldr	r1, [pc, #60]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d008      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002f08:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f14:	4907      	ldr	r1, [pc, #28]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00c      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002f26:	4b03      	ldr	r3, [pc, #12]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	e002      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002f32:	bf00      	nop
 8002f34:	40021000 	.word	0x40021000
 8002f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f3a:	4913      	ldr	r1, [pc, #76]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002f4c:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f58:	490b      	ldr	r1, [pc, #44]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d008      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002f6a:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f76:	4904      	ldr	r1, [pc, #16]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3748      	adds	r7, #72	; 0x48
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40021000 	.word	0x40021000

08002f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e049      	b.n	8003032 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fd fd36 	bl	8000a24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4610      	mov	r0, r2
 8002fcc:	f000 fcf4 	bl	80039b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b01      	cmp	r3, #1
 800304e:	d001      	beq.n	8003054 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e04f      	b.n	80030f4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a23      	ldr	r2, [pc, #140]	; (8003100 <HAL_TIM_Base_Start_IT+0xc4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d01d      	beq.n	80030b2 <HAL_TIM_Base_Start_IT+0x76>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800307e:	d018      	beq.n	80030b2 <HAL_TIM_Base_Start_IT+0x76>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a1f      	ldr	r2, [pc, #124]	; (8003104 <HAL_TIM_Base_Start_IT+0xc8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d013      	beq.n	80030b2 <HAL_TIM_Base_Start_IT+0x76>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a1e      	ldr	r2, [pc, #120]	; (8003108 <HAL_TIM_Base_Start_IT+0xcc>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d00e      	beq.n	80030b2 <HAL_TIM_Base_Start_IT+0x76>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a1c      	ldr	r2, [pc, #112]	; (800310c <HAL_TIM_Base_Start_IT+0xd0>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d009      	beq.n	80030b2 <HAL_TIM_Base_Start_IT+0x76>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a1b      	ldr	r2, [pc, #108]	; (8003110 <HAL_TIM_Base_Start_IT+0xd4>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d004      	beq.n	80030b2 <HAL_TIM_Base_Start_IT+0x76>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a19      	ldr	r2, [pc, #100]	; (8003114 <HAL_TIM_Base_Start_IT+0xd8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d115      	bne.n	80030de <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	4b17      	ldr	r3, [pc, #92]	; (8003118 <HAL_TIM_Base_Start_IT+0xdc>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b06      	cmp	r3, #6
 80030c2:	d015      	beq.n	80030f0 <HAL_TIM_Base_Start_IT+0xb4>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ca:	d011      	beq.n	80030f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0201 	orr.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030dc:	e008      	b.n	80030f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0201 	orr.w	r2, r2, #1
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	e000      	b.n	80030f2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	40012c00 	.word	0x40012c00
 8003104:	40000400 	.word	0x40000400
 8003108:	40000800 	.word	0x40000800
 800310c:	40013400 	.word	0x40013400
 8003110:	40014000 	.word	0x40014000
 8003114:	40015000 	.word	0x40015000
 8003118:	00010007 	.word	0x00010007

0800311c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e049      	b.n	80031c2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f841 	bl	80031ca <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3304      	adds	r3, #4
 8003158:	4619      	mov	r1, r3
 800315a:	4610      	mov	r0, r2
 800315c:	f000 fc2c 	bl	80039b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
	...

080031e0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d104      	bne.n	80031fe <HAL_TIM_IC_Start_IT+0x1e>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	e023      	b.n	8003246 <HAL_TIM_IC_Start_IT+0x66>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b04      	cmp	r3, #4
 8003202:	d104      	bne.n	800320e <HAL_TIM_IC_Start_IT+0x2e>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800320a:	b2db      	uxtb	r3, r3
 800320c:	e01b      	b.n	8003246 <HAL_TIM_IC_Start_IT+0x66>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b08      	cmp	r3, #8
 8003212:	d104      	bne.n	800321e <HAL_TIM_IC_Start_IT+0x3e>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800321a:	b2db      	uxtb	r3, r3
 800321c:	e013      	b.n	8003246 <HAL_TIM_IC_Start_IT+0x66>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b0c      	cmp	r3, #12
 8003222:	d104      	bne.n	800322e <HAL_TIM_IC_Start_IT+0x4e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800322a:	b2db      	uxtb	r3, r3
 800322c:	e00b      	b.n	8003246 <HAL_TIM_IC_Start_IT+0x66>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b10      	cmp	r3, #16
 8003232:	d104      	bne.n	800323e <HAL_TIM_IC_Start_IT+0x5e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800323a:	b2db      	uxtb	r3, r3
 800323c:	e003      	b.n	8003246 <HAL_TIM_IC_Start_IT+0x66>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003244:	b2db      	uxtb	r3, r3
 8003246:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d104      	bne.n	8003258 <HAL_TIM_IC_Start_IT+0x78>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003254:	b2db      	uxtb	r3, r3
 8003256:	e013      	b.n	8003280 <HAL_TIM_IC_Start_IT+0xa0>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	2b04      	cmp	r3, #4
 800325c:	d104      	bne.n	8003268 <HAL_TIM_IC_Start_IT+0x88>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003264:	b2db      	uxtb	r3, r3
 8003266:	e00b      	b.n	8003280 <HAL_TIM_IC_Start_IT+0xa0>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2b08      	cmp	r3, #8
 800326c:	d104      	bne.n	8003278 <HAL_TIM_IC_Start_IT+0x98>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003274:	b2db      	uxtb	r3, r3
 8003276:	e003      	b.n	8003280 <HAL_TIM_IC_Start_IT+0xa0>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800327e:	b2db      	uxtb	r3, r3
 8003280:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003282:	7bbb      	ldrb	r3, [r7, #14]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d102      	bne.n	800328e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003288:	7b7b      	ldrb	r3, [r7, #13]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d001      	beq.n	8003292 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e0dd      	b.n	800344e <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d104      	bne.n	80032a2 <HAL_TIM_IC_Start_IT+0xc2>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032a0:	e023      	b.n	80032ea <HAL_TIM_IC_Start_IT+0x10a>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d104      	bne.n	80032b2 <HAL_TIM_IC_Start_IT+0xd2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032b0:	e01b      	b.n	80032ea <HAL_TIM_IC_Start_IT+0x10a>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d104      	bne.n	80032c2 <HAL_TIM_IC_Start_IT+0xe2>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032c0:	e013      	b.n	80032ea <HAL_TIM_IC_Start_IT+0x10a>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b0c      	cmp	r3, #12
 80032c6:	d104      	bne.n	80032d2 <HAL_TIM_IC_Start_IT+0xf2>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032d0:	e00b      	b.n	80032ea <HAL_TIM_IC_Start_IT+0x10a>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b10      	cmp	r3, #16
 80032d6:	d104      	bne.n	80032e2 <HAL_TIM_IC_Start_IT+0x102>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032e0:	e003      	b.n	80032ea <HAL_TIM_IC_Start_IT+0x10a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2202      	movs	r2, #2
 80032e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d104      	bne.n	80032fa <HAL_TIM_IC_Start_IT+0x11a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032f8:	e013      	b.n	8003322 <HAL_TIM_IC_Start_IT+0x142>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d104      	bne.n	800330a <HAL_TIM_IC_Start_IT+0x12a>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003308:	e00b      	b.n	8003322 <HAL_TIM_IC_Start_IT+0x142>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b08      	cmp	r3, #8
 800330e:	d104      	bne.n	800331a <HAL_TIM_IC_Start_IT+0x13a>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003318:	e003      	b.n	8003322 <HAL_TIM_IC_Start_IT+0x142>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2202      	movs	r2, #2
 800331e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b0c      	cmp	r3, #12
 8003326:	d841      	bhi.n	80033ac <HAL_TIM_IC_Start_IT+0x1cc>
 8003328:	a201      	add	r2, pc, #4	; (adr r2, 8003330 <HAL_TIM_IC_Start_IT+0x150>)
 800332a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332e:	bf00      	nop
 8003330:	08003365 	.word	0x08003365
 8003334:	080033ad 	.word	0x080033ad
 8003338:	080033ad 	.word	0x080033ad
 800333c:	080033ad 	.word	0x080033ad
 8003340:	08003377 	.word	0x08003377
 8003344:	080033ad 	.word	0x080033ad
 8003348:	080033ad 	.word	0x080033ad
 800334c:	080033ad 	.word	0x080033ad
 8003350:	08003389 	.word	0x08003389
 8003354:	080033ad 	.word	0x080033ad
 8003358:	080033ad 	.word	0x080033ad
 800335c:	080033ad 	.word	0x080033ad
 8003360:	0800339b 	.word	0x0800339b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0202 	orr.w	r2, r2, #2
 8003372:	60da      	str	r2, [r3, #12]
      break;
 8003374:	e01d      	b.n	80033b2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0204 	orr.w	r2, r2, #4
 8003384:	60da      	str	r2, [r3, #12]
      break;
 8003386:	e014      	b.n	80033b2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0208 	orr.w	r2, r2, #8
 8003396:	60da      	str	r2, [r3, #12]
      break;
 8003398:	e00b      	b.n	80033b2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0210 	orr.w	r2, r2, #16
 80033a8:	60da      	str	r2, [r3, #12]
      break;
 80033aa:	e002      	b.n	80033b2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]
      break;
 80033b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d149      	bne.n	800344c <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2201      	movs	r2, #1
 80033be:	6839      	ldr	r1, [r7, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fd55 	bl	8003e70 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a23      	ldr	r2, [pc, #140]	; (8003458 <HAL_TIM_IC_Start_IT+0x278>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d01d      	beq.n	800340c <HAL_TIM_IC_Start_IT+0x22c>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d8:	d018      	beq.n	800340c <HAL_TIM_IC_Start_IT+0x22c>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a1f      	ldr	r2, [pc, #124]	; (800345c <HAL_TIM_IC_Start_IT+0x27c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d013      	beq.n	800340c <HAL_TIM_IC_Start_IT+0x22c>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a1d      	ldr	r2, [pc, #116]	; (8003460 <HAL_TIM_IC_Start_IT+0x280>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00e      	beq.n	800340c <HAL_TIM_IC_Start_IT+0x22c>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a1c      	ldr	r2, [pc, #112]	; (8003464 <HAL_TIM_IC_Start_IT+0x284>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d009      	beq.n	800340c <HAL_TIM_IC_Start_IT+0x22c>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1a      	ldr	r2, [pc, #104]	; (8003468 <HAL_TIM_IC_Start_IT+0x288>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d004      	beq.n	800340c <HAL_TIM_IC_Start_IT+0x22c>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a19      	ldr	r2, [pc, #100]	; (800346c <HAL_TIM_IC_Start_IT+0x28c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d115      	bne.n	8003438 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	4b17      	ldr	r3, [pc, #92]	; (8003470 <HAL_TIM_IC_Start_IT+0x290>)
 8003414:	4013      	ands	r3, r2
 8003416:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b06      	cmp	r3, #6
 800341c:	d015      	beq.n	800344a <HAL_TIM_IC_Start_IT+0x26a>
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003424:	d011      	beq.n	800344a <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0201 	orr.w	r2, r2, #1
 8003434:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003436:	e008      	b.n	800344a <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0201 	orr.w	r2, r2, #1
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	e000      	b.n	800344c <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800344a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800344c:	7bfb      	ldrb	r3, [r7, #15]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40012c00 	.word	0x40012c00
 800345c:	40000400 	.word	0x40000400
 8003460:	40000800 	.word	0x40000800
 8003464:	40013400 	.word	0x40013400
 8003468:	40014000 	.word	0x40014000
 800346c:	40015000 	.word	0x40015000
 8003470:	00010007 	.word	0x00010007

08003474 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b02      	cmp	r3, #2
 8003488:	d122      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b02      	cmp	r3, #2
 8003496:	d11b      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0202 	mvn.w	r2, #2
 80034a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7fd f8b6 	bl	8000628 <HAL_TIM_IC_CaptureCallback>
 80034bc:	e005      	b.n	80034ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fa5c 	bl	800397c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 fa63 	bl	8003990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d122      	bne.n	8003524 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d11b      	bne.n	8003524 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0204 	mvn.w	r2, #4
 80034f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2202      	movs	r2, #2
 80034fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7fd f88c 	bl	8000628 <HAL_TIM_IC_CaptureCallback>
 8003510:	e005      	b.n	800351e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fa32 	bl	800397c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 fa39 	bl	8003990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b08      	cmp	r3, #8
 8003530:	d122      	bne.n	8003578 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b08      	cmp	r3, #8
 800353e:	d11b      	bne.n	8003578 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f06f 0208 	mvn.w	r2, #8
 8003548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2204      	movs	r2, #4
 800354e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7fd f862 	bl	8000628 <HAL_TIM_IC_CaptureCallback>
 8003564:	e005      	b.n	8003572 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fa08 	bl	800397c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 fa0f 	bl	8003990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	f003 0310 	and.w	r3, r3, #16
 8003582:	2b10      	cmp	r3, #16
 8003584:	d122      	bne.n	80035cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	2b10      	cmp	r3, #16
 8003592:	d11b      	bne.n	80035cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f06f 0210 	mvn.w	r2, #16
 800359c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2208      	movs	r2, #8
 80035a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7fd f838 	bl	8000628 <HAL_TIM_IC_CaptureCallback>
 80035b8:	e005      	b.n	80035c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f9de 	bl	800397c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f9e5 	bl	8003990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d10e      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d107      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f06f 0201 	mvn.w	r2, #1
 80035f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fd f830 	bl	8000658 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003602:	2b80      	cmp	r3, #128	; 0x80
 8003604:	d10e      	bne.n	8003624 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003610:	2b80      	cmp	r3, #128	; 0x80
 8003612:	d107      	bne.n	8003624 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800361c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fce2 	bl	8003fe8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003632:	d10e      	bne.n	8003652 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363e:	2b80      	cmp	r3, #128	; 0x80
 8003640:	d107      	bne.n	8003652 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800364a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 fcd5 	bl	8003ffc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365c:	2b40      	cmp	r3, #64	; 0x40
 800365e:	d10e      	bne.n	800367e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366a:	2b40      	cmp	r3, #64	; 0x40
 800366c:	d107      	bne.n	800367e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f993 	bl	80039a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	f003 0320 	and.w	r3, r3, #32
 8003688:	2b20      	cmp	r3, #32
 800368a:	d10e      	bne.n	80036aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b20      	cmp	r3, #32
 8003698:	d107      	bne.n	80036aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f06f 0220 	mvn.w	r2, #32
 80036a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 fc95 	bl	8003fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b086      	sub	sp, #24
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	60f8      	str	r0, [r7, #12]
 80036ba:	60b9      	str	r1, [r7, #8]
 80036bc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e088      	b.n	80037e2 <HAL_TIM_IC_ConfigChannel+0x130>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d11b      	bne.n	8003716 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	6819      	ldr	r1, [r3, #0]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f000 fa01 	bl	8003af4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699a      	ldr	r2, [r3, #24]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 020c 	bic.w	r2, r2, #12
 8003700:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6999      	ldr	r1, [r3, #24]
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	619a      	str	r2, [r3, #24]
 8003714:	e060      	b.n	80037d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b04      	cmp	r3, #4
 800371a:	d11c      	bne.n	8003756 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6818      	ldr	r0, [r3, #0]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	6819      	ldr	r1, [r3, #0]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f000 fa7f 	bl	8003c2e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699a      	ldr	r2, [r3, #24]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800373e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6999      	ldr	r1, [r3, #24]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	021a      	lsls	r2, r3, #8
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	619a      	str	r2, [r3, #24]
 8003754:	e040      	b.n	80037d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b08      	cmp	r3, #8
 800375a:	d11b      	bne.n	8003794 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6818      	ldr	r0, [r3, #0]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	6819      	ldr	r1, [r3, #0]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f000 facc 	bl	8003d08 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	69da      	ldr	r2, [r3, #28]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 020c 	bic.w	r2, r2, #12
 800377e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	69d9      	ldr	r1, [r3, #28]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	61da      	str	r2, [r3, #28]
 8003792:	e021      	b.n	80037d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b0c      	cmp	r3, #12
 8003798:	d11c      	bne.n	80037d4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6818      	ldr	r0, [r3, #0]
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	6819      	ldr	r1, [r3, #0]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f000 fae9 	bl	8003d80 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69da      	ldr	r2, [r3, #28]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80037bc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69d9      	ldr	r1, [r3, #28]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	021a      	lsls	r2, r3, #8
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	61da      	str	r2, [r3, #28]
 80037d2:	e001      	b.n	80037d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b084      	sub	sp, #16
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_TIM_ConfigClockSource+0x1c>
 8003802:	2302      	movs	r3, #2
 8003804:	e0b6      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x18a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2202      	movs	r2, #2
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003824:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003828:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003830:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003842:	d03e      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0xd8>
 8003844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003848:	f200 8087 	bhi.w	800395a <HAL_TIM_ConfigClockSource+0x170>
 800384c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003850:	f000 8086 	beq.w	8003960 <HAL_TIM_ConfigClockSource+0x176>
 8003854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003858:	d87f      	bhi.n	800395a <HAL_TIM_ConfigClockSource+0x170>
 800385a:	2b70      	cmp	r3, #112	; 0x70
 800385c:	d01a      	beq.n	8003894 <HAL_TIM_ConfigClockSource+0xaa>
 800385e:	2b70      	cmp	r3, #112	; 0x70
 8003860:	d87b      	bhi.n	800395a <HAL_TIM_ConfigClockSource+0x170>
 8003862:	2b60      	cmp	r3, #96	; 0x60
 8003864:	d050      	beq.n	8003908 <HAL_TIM_ConfigClockSource+0x11e>
 8003866:	2b60      	cmp	r3, #96	; 0x60
 8003868:	d877      	bhi.n	800395a <HAL_TIM_ConfigClockSource+0x170>
 800386a:	2b50      	cmp	r3, #80	; 0x50
 800386c:	d03c      	beq.n	80038e8 <HAL_TIM_ConfigClockSource+0xfe>
 800386e:	2b50      	cmp	r3, #80	; 0x50
 8003870:	d873      	bhi.n	800395a <HAL_TIM_ConfigClockSource+0x170>
 8003872:	2b40      	cmp	r3, #64	; 0x40
 8003874:	d058      	beq.n	8003928 <HAL_TIM_ConfigClockSource+0x13e>
 8003876:	2b40      	cmp	r3, #64	; 0x40
 8003878:	d86f      	bhi.n	800395a <HAL_TIM_ConfigClockSource+0x170>
 800387a:	2b30      	cmp	r3, #48	; 0x30
 800387c:	d064      	beq.n	8003948 <HAL_TIM_ConfigClockSource+0x15e>
 800387e:	2b30      	cmp	r3, #48	; 0x30
 8003880:	d86b      	bhi.n	800395a <HAL_TIM_ConfigClockSource+0x170>
 8003882:	2b20      	cmp	r3, #32
 8003884:	d060      	beq.n	8003948 <HAL_TIM_ConfigClockSource+0x15e>
 8003886:	2b20      	cmp	r3, #32
 8003888:	d867      	bhi.n	800395a <HAL_TIM_ConfigClockSource+0x170>
 800388a:	2b00      	cmp	r3, #0
 800388c:	d05c      	beq.n	8003948 <HAL_TIM_ConfigClockSource+0x15e>
 800388e:	2b10      	cmp	r3, #16
 8003890:	d05a      	beq.n	8003948 <HAL_TIM_ConfigClockSource+0x15e>
 8003892:	e062      	b.n	800395a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6818      	ldr	r0, [r3, #0]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	6899      	ldr	r1, [r3, #8]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f000 fac4 	bl	8003e30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038b6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	609a      	str	r2, [r3, #8]
      break;
 80038c0:	e04f      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6899      	ldr	r1, [r3, #8]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f000 faad 	bl	8003e30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038e4:	609a      	str	r2, [r3, #8]
      break;
 80038e6:	e03c      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6818      	ldr	r0, [r3, #0]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	6859      	ldr	r1, [r3, #4]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	461a      	mov	r2, r3
 80038f6:	f000 f96b 	bl	8003bd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2150      	movs	r1, #80	; 0x50
 8003900:	4618      	mov	r0, r3
 8003902:	f000 fa7a 	bl	8003dfa <TIM_ITRx_SetConfig>
      break;
 8003906:	e02c      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6818      	ldr	r0, [r3, #0]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	6859      	ldr	r1, [r3, #4]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	461a      	mov	r2, r3
 8003916:	f000 f9c7 	bl	8003ca8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2160      	movs	r1, #96	; 0x60
 8003920:	4618      	mov	r0, r3
 8003922:	f000 fa6a 	bl	8003dfa <TIM_ITRx_SetConfig>
      break;
 8003926:	e01c      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	6859      	ldr	r1, [r3, #4]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	461a      	mov	r2, r3
 8003936:	f000 f94b 	bl	8003bd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2140      	movs	r1, #64	; 0x40
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fa5a 	bl	8003dfa <TIM_ITRx_SetConfig>
      break;
 8003946:	e00c      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4619      	mov	r1, r3
 8003952:	4610      	mov	r0, r2
 8003954:	f000 fa51 	bl	8003dfa <TIM_ITRx_SetConfig>
      break;
 8003958:	e003      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	73fb      	strb	r3, [r7, #15]
      break;
 800395e:	e000      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003960:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003972:	7bfb      	ldrb	r3, [r7, #15]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a42      	ldr	r2, [pc, #264]	; (8003ad4 <TIM_Base_SetConfig+0x11c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d013      	beq.n	80039f8 <TIM_Base_SetConfig+0x40>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d6:	d00f      	beq.n	80039f8 <TIM_Base_SetConfig+0x40>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a3f      	ldr	r2, [pc, #252]	; (8003ad8 <TIM_Base_SetConfig+0x120>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d00b      	beq.n	80039f8 <TIM_Base_SetConfig+0x40>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a3e      	ldr	r2, [pc, #248]	; (8003adc <TIM_Base_SetConfig+0x124>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d007      	beq.n	80039f8 <TIM_Base_SetConfig+0x40>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a3d      	ldr	r2, [pc, #244]	; (8003ae0 <TIM_Base_SetConfig+0x128>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d003      	beq.n	80039f8 <TIM_Base_SetConfig+0x40>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a3c      	ldr	r2, [pc, #240]	; (8003ae4 <TIM_Base_SetConfig+0x12c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d108      	bne.n	8003a0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a31      	ldr	r2, [pc, #196]	; (8003ad4 <TIM_Base_SetConfig+0x11c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d01f      	beq.n	8003a52 <TIM_Base_SetConfig+0x9a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a18:	d01b      	beq.n	8003a52 <TIM_Base_SetConfig+0x9a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a2e      	ldr	r2, [pc, #184]	; (8003ad8 <TIM_Base_SetConfig+0x120>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d017      	beq.n	8003a52 <TIM_Base_SetConfig+0x9a>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a2d      	ldr	r2, [pc, #180]	; (8003adc <TIM_Base_SetConfig+0x124>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d013      	beq.n	8003a52 <TIM_Base_SetConfig+0x9a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a2c      	ldr	r2, [pc, #176]	; (8003ae0 <TIM_Base_SetConfig+0x128>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d00f      	beq.n	8003a52 <TIM_Base_SetConfig+0x9a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a2c      	ldr	r2, [pc, #176]	; (8003ae8 <TIM_Base_SetConfig+0x130>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00b      	beq.n	8003a52 <TIM_Base_SetConfig+0x9a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a2b      	ldr	r2, [pc, #172]	; (8003aec <TIM_Base_SetConfig+0x134>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d007      	beq.n	8003a52 <TIM_Base_SetConfig+0x9a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a2a      	ldr	r2, [pc, #168]	; (8003af0 <TIM_Base_SetConfig+0x138>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d003      	beq.n	8003a52 <TIM_Base_SetConfig+0x9a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a25      	ldr	r2, [pc, #148]	; (8003ae4 <TIM_Base_SetConfig+0x12c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d108      	bne.n	8003a64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a12      	ldr	r2, [pc, #72]	; (8003ad4 <TIM_Base_SetConfig+0x11c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d013      	beq.n	8003ab8 <TIM_Base_SetConfig+0x100>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a13      	ldr	r2, [pc, #76]	; (8003ae0 <TIM_Base_SetConfig+0x128>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00f      	beq.n	8003ab8 <TIM_Base_SetConfig+0x100>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a13      	ldr	r2, [pc, #76]	; (8003ae8 <TIM_Base_SetConfig+0x130>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d00b      	beq.n	8003ab8 <TIM_Base_SetConfig+0x100>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a12      	ldr	r2, [pc, #72]	; (8003aec <TIM_Base_SetConfig+0x134>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d007      	beq.n	8003ab8 <TIM_Base_SetConfig+0x100>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a11      	ldr	r2, [pc, #68]	; (8003af0 <TIM_Base_SetConfig+0x138>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d003      	beq.n	8003ab8 <TIM_Base_SetConfig+0x100>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a0c      	ldr	r2, [pc, #48]	; (8003ae4 <TIM_Base_SetConfig+0x12c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d103      	bne.n	8003ac0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	615a      	str	r2, [r3, #20]
}
 8003ac6:	bf00      	nop
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40012c00 	.word	0x40012c00
 8003ad8:	40000400 	.word	0x40000400
 8003adc:	40000800 	.word	0x40000800
 8003ae0:	40013400 	.word	0x40013400
 8003ae4:	40015000 	.word	0x40015000
 8003ae8:	40014000 	.word	0x40014000
 8003aec:	40014400 	.word	0x40014400
 8003af0:	40014800 	.word	0x40014800

08003af4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	f023 0201 	bic.w	r2, r3, #1
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4a26      	ldr	r2, [pc, #152]	; (8003bb8 <TIM_TI1_SetConfig+0xc4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d017      	beq.n	8003b52 <TIM_TI1_SetConfig+0x5e>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b28:	d013      	beq.n	8003b52 <TIM_TI1_SetConfig+0x5e>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4a23      	ldr	r2, [pc, #140]	; (8003bbc <TIM_TI1_SetConfig+0xc8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00f      	beq.n	8003b52 <TIM_TI1_SetConfig+0x5e>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4a22      	ldr	r2, [pc, #136]	; (8003bc0 <TIM_TI1_SetConfig+0xcc>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00b      	beq.n	8003b52 <TIM_TI1_SetConfig+0x5e>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4a21      	ldr	r2, [pc, #132]	; (8003bc4 <TIM_TI1_SetConfig+0xd0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d007      	beq.n	8003b52 <TIM_TI1_SetConfig+0x5e>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4a20      	ldr	r2, [pc, #128]	; (8003bc8 <TIM_TI1_SetConfig+0xd4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d003      	beq.n	8003b52 <TIM_TI1_SetConfig+0x5e>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4a1f      	ldr	r2, [pc, #124]	; (8003bcc <TIM_TI1_SetConfig+0xd8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d101      	bne.n	8003b56 <TIM_TI1_SetConfig+0x62>
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <TIM_TI1_SetConfig+0x64>
 8003b56:	2300      	movs	r3, #0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f023 0303 	bic.w	r3, r3, #3
 8003b62:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	e003      	b.n	8003b76 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f043 0301 	orr.w	r3, r3, #1
 8003b74:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f023 030a 	bic.w	r3, r3, #10
 8003b90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f003 030a 	and.w	r3, r3, #10
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	621a      	str	r2, [r3, #32]
}
 8003baa:	bf00      	nop
 8003bac:	371c      	adds	r7, #28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	40012c00 	.word	0x40012c00
 8003bbc:	40000400 	.word	0x40000400
 8003bc0:	40000800 	.word	0x40000800
 8003bc4:	40013400 	.word	0x40013400
 8003bc8:	40014000 	.word	0x40014000
 8003bcc:	40015000 	.word	0x40015000

08003bd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	f023 0201 	bic.w	r2, r3, #1
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f023 030a 	bic.w	r3, r3, #10
 8003c0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	621a      	str	r2, [r3, #32]
}
 8003c22:	bf00      	nop
 8003c24:	371c      	adds	r7, #28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b087      	sub	sp, #28
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	607a      	str	r2, [r7, #4]
 8003c3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	f023 0210 	bic.w	r2, r3, #16
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	021b      	lsls	r3, r3, #8
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	031b      	lsls	r3, r3, #12
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c80:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	621a      	str	r2, [r3, #32]
}
 8003c9c:	bf00      	nop
 8003c9e:	371c      	adds	r7, #28
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	f023 0210 	bic.w	r2, r3, #16
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	031b      	lsls	r3, r3, #12
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ce4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	621a      	str	r2, [r3, #32]
}
 8003cfc:	bf00      	nop
 8003cfe:	371c      	adds	r7, #28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f023 0303 	bic.w	r3, r3, #3
 8003d34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003d58:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	021b      	lsls	r3, r3, #8
 8003d5e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	621a      	str	r2, [r3, #32]
}
 8003d74:	bf00      	nop
 8003d76:	371c      	adds	r7, #28
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	021b      	lsls	r3, r3, #8
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dbe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	031b      	lsls	r3, r3, #12
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003dd2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	031b      	lsls	r3, r3, #12
 8003dd8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	621a      	str	r2, [r3, #32]
}
 8003dee:	bf00      	nop
 8003df0:	371c      	adds	r7, #28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b085      	sub	sp, #20
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f043 0307 	orr.w	r3, r3, #7
 8003e1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	609a      	str	r2, [r3, #8]
}
 8003e24:	bf00      	nop
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
 8003e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	021a      	lsls	r2, r3, #8
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	431a      	orrs	r2, r3
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	609a      	str	r2, [r3, #8]
}
 8003e64:	bf00      	nop
 8003e66:	371c      	adds	r7, #28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f003 031f 	and.w	r3, r3, #31
 8003e82:	2201      	movs	r2, #1
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a1a      	ldr	r2, [r3, #32]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	43db      	mvns	r3, r3
 8003e92:	401a      	ands	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6a1a      	ldr	r2, [r3, #32]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f003 031f 	and.w	r3, r3, #31
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	621a      	str	r2, [r3, #32]
}
 8003eae:	bf00      	nop
 8003eb0:	371c      	adds	r7, #28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
	...

08003ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d101      	bne.n	8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	e06d      	b.n	8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a30      	ldr	r2, [pc, #192]	; (8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d009      	beq.n	8003f12 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a2f      	ldr	r2, [pc, #188]	; (8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d004      	beq.n	8003f12 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a2d      	ldr	r2, [pc, #180]	; (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d108      	bne.n	8003f24 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f18:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a1e      	ldr	r2, [pc, #120]	; (8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d01d      	beq.n	8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f50:	d018      	beq.n	8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a1c      	ldr	r2, [pc, #112]	; (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d013      	beq.n	8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a1a      	ldr	r2, [pc, #104]	; (8003fcc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d00e      	beq.n	8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a15      	ldr	r2, [pc, #84]	; (8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d009      	beq.n	8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a16      	ldr	r2, [pc, #88]	; (8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d004      	beq.n	8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a11      	ldr	r2, [pc, #68]	; (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d10c      	bne.n	8003f9e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	40012c00 	.word	0x40012c00
 8003fc0:	40013400 	.word	0x40013400
 8003fc4:	40015000 	.word	0x40015000
 8003fc8:	40000400 	.word	0x40000400
 8003fcc:	40000800 	.word	0x40000800
 8003fd0:	40014000 	.word	0x40014000

08003fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e040      	b.n	80040a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004026:	2b00      	cmp	r3, #0
 8004028:	d106      	bne.n	8004038 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7fc fde2 	bl	8000bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2224      	movs	r2, #36	; 0x24
 800403c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0201 	bic.w	r2, r2, #1
 800404c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fbd4 	bl	80047fc <UART_SetConfig>
 8004054:	4603      	mov	r3, r0
 8004056:	2b01      	cmp	r3, #1
 8004058:	d101      	bne.n	800405e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e022      	b.n	80040a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fd9c 	bl	8004ba4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800407a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800408a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 fe23 	bl	8004ce8 <UART_CheckIdleState>
 80040a2:	4603      	mov	r3, r0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b08b      	sub	sp, #44	; 0x2c
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	4613      	mov	r3, r2
 80040b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040be:	2b20      	cmp	r3, #32
 80040c0:	d147      	bne.n	8004152 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <HAL_UART_Transmit_IT+0x22>
 80040c8:	88fb      	ldrh	r3, [r7, #6]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e040      	b.n	8004154 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	88fa      	ldrh	r2, [r7, #6]
 80040dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	88fa      	ldrh	r2, [r7, #6]
 80040e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2221      	movs	r2, #33	; 0x21
 80040fa:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004104:	d107      	bne.n	8004116 <HAL_UART_Transmit_IT+0x6a>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d103      	bne.n	8004116 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4a13      	ldr	r2, [pc, #76]	; (8004160 <HAL_UART_Transmit_IT+0xb4>)
 8004112:	66da      	str	r2, [r3, #108]	; 0x6c
 8004114:	e002      	b.n	800411c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4a12      	ldr	r2, [pc, #72]	; (8004164 <HAL_UART_Transmit_IT+0xb8>)
 800411a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	e853 3f00 	ldrex	r3, [r3]
 8004128:	613b      	str	r3, [r7, #16]
   return(result);
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	623b      	str	r3, [r7, #32]
 800413c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413e:	69f9      	ldr	r1, [r7, #28]
 8004140:	6a3a      	ldr	r2, [r7, #32]
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	61bb      	str	r3, [r7, #24]
   return(result);
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1e6      	bne.n	800411c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	e000      	b.n	8004154 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004152:	2302      	movs	r3, #2
  }
}
 8004154:	4618      	mov	r0, r3
 8004156:	372c      	adds	r7, #44	; 0x2c
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	08005241 	.word	0x08005241
 8004164:	08005189 	.word	0x08005189

08004168 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08a      	sub	sp, #40	; 0x28
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	4613      	mov	r3, r2
 8004174:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800417c:	2b20      	cmp	r3, #32
 800417e:	d132      	bne.n	80041e6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <HAL_UART_Receive_IT+0x24>
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e02b      	b.n	80041e8 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d018      	beq.n	80041d6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	e853 3f00 	ldrex	r3, [r3]
 80041b0:	613b      	str	r3, [r7, #16]
   return(result);
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	623b      	str	r3, [r7, #32]
 80041c4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	69f9      	ldr	r1, [r7, #28]
 80041c8:	6a3a      	ldr	r2, [r7, #32]
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e6      	bne.n	80041a4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041d6:	88fb      	ldrh	r3, [r7, #6]
 80041d8:	461a      	mov	r2, r3
 80041da:	68b9      	ldr	r1, [r7, #8]
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fe93 	bl	8004f08 <UART_Start_Receive_IT>
 80041e2:	4603      	mov	r3, r0
 80041e4:	e000      	b.n	80041e8 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80041e6:	2302      	movs	r3, #2
  }
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3728      	adds	r7, #40	; 0x28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b0ba      	sub	sp, #232	; 0xe8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004216:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800421a:	f640 030f 	movw	r3, #2063	; 0x80f
 800421e:	4013      	ands	r3, r2
 8004220:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004224:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004228:	2b00      	cmp	r3, #0
 800422a:	d115      	bne.n	8004258 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800422c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00f      	beq.n	8004258 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800423c:	f003 0320 	and.w	r3, r3, #32
 8004240:	2b00      	cmp	r3, #0
 8004242:	d009      	beq.n	8004258 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 82ab 	beq.w	80047a4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	4798      	blx	r3
      }
      return;
 8004256:	e2a5      	b.n	80047a4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004258:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 8117 	beq.w	8004490 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800426e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004272:	4b85      	ldr	r3, [pc, #532]	; (8004488 <HAL_UART_IRQHandler+0x298>)
 8004274:	4013      	ands	r3, r2
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 810a 	beq.w	8004490 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800427c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d011      	beq.n	80042ac <HAL_UART_IRQHandler+0xbc>
 8004288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800428c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00b      	beq.n	80042ac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2201      	movs	r2, #1
 800429a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042a2:	f043 0201 	orr.w	r2, r3, #1
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d011      	beq.n	80042dc <HAL_UART_IRQHandler+0xec>
 80042b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00b      	beq.n	80042dc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2202      	movs	r2, #2
 80042ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042d2:	f043 0204 	orr.w	r2, r3, #4
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d011      	beq.n	800430c <HAL_UART_IRQHandler+0x11c>
 80042e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00b      	beq.n	800430c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2204      	movs	r2, #4
 80042fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004302:	f043 0202 	orr.w	r2, r3, #2
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800430c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b00      	cmp	r3, #0
 8004316:	d017      	beq.n	8004348 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431c:	f003 0320 	and.w	r3, r3, #32
 8004320:	2b00      	cmp	r3, #0
 8004322:	d105      	bne.n	8004330 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004328:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00b      	beq.n	8004348 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2208      	movs	r2, #8
 8004336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800433e:	f043 0208 	orr.w	r2, r3, #8
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800434c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004350:	2b00      	cmp	r3, #0
 8004352:	d012      	beq.n	800437a <HAL_UART_IRQHandler+0x18a>
 8004354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004358:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00c      	beq.n	800437a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004368:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004370:	f043 0220 	orr.w	r2, r3, #32
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 8211 	beq.w	80047a8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800438a:	f003 0320 	and.w	r3, r3, #32
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00d      	beq.n	80043ae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b00      	cmp	r3, #0
 800439c:	d007      	beq.n	80043ae <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c2:	2b40      	cmp	r3, #64	; 0x40
 80043c4:	d005      	beq.n	80043d2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80043c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d04f      	beq.n	8004472 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fe5e 	bl	8005094 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e2:	2b40      	cmp	r3, #64	; 0x40
 80043e4:	d141      	bne.n	800446a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3308      	adds	r3, #8
 80043ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043f4:	e853 3f00 	ldrex	r3, [r3]
 80043f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004404:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3308      	adds	r3, #8
 800440e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004412:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004416:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800441e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004422:	e841 2300 	strex	r3, r2, [r1]
 8004426:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800442a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1d9      	bne.n	80043e6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004436:	2b00      	cmp	r3, #0
 8004438:	d013      	beq.n	8004462 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800443e:	4a13      	ldr	r2, [pc, #76]	; (800448c <HAL_UART_IRQHandler+0x29c>)
 8004440:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004446:	4618      	mov	r0, r3
 8004448:	f7fc ff17 	bl	800127a <HAL_DMA_Abort_IT>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d017      	beq.n	8004482 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800445c:	4610      	mov	r0, r2
 800445e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004460:	e00f      	b.n	8004482 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f9b4 	bl	80047d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004468:	e00b      	b.n	8004482 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f9b0 	bl	80047d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004470:	e007      	b.n	8004482 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f9ac 	bl	80047d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004480:	e192      	b.n	80047a8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004482:	bf00      	nop
    return;
 8004484:	e190      	b.n	80047a8 <HAL_UART_IRQHandler+0x5b8>
 8004486:	bf00      	nop
 8004488:	04000120 	.word	0x04000120
 800448c:	0800515d 	.word	0x0800515d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004494:	2b01      	cmp	r3, #1
 8004496:	f040 814b 	bne.w	8004730 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800449a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800449e:	f003 0310 	and.w	r3, r3, #16
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 8144 	beq.w	8004730 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80044a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044ac:	f003 0310 	and.w	r3, r3, #16
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 813d 	beq.w	8004730 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2210      	movs	r2, #16
 80044bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c8:	2b40      	cmp	r3, #64	; 0x40
 80044ca:	f040 80b5 	bne.w	8004638 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 8164 	beq.w	80047ac <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044ee:	429a      	cmp	r2, r3
 80044f0:	f080 815c 	bcs.w	80047ac <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	2b20      	cmp	r3, #32
 8004506:	f000 8086 	beq.w	8004616 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004516:	e853 3f00 	ldrex	r3, [r3]
 800451a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800451e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004522:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004526:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	461a      	mov	r2, r3
 8004530:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004534:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004538:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004540:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004544:	e841 2300 	strex	r3, r2, [r1]
 8004548:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800454c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1da      	bne.n	800450a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3308      	adds	r3, #8
 800455a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800455e:	e853 3f00 	ldrex	r3, [r3]
 8004562:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004564:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004566:	f023 0301 	bic.w	r3, r3, #1
 800456a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3308      	adds	r3, #8
 8004574:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004578:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800457c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004580:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004584:	e841 2300 	strex	r3, r2, [r1]
 8004588:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800458a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1e1      	bne.n	8004554 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	3308      	adds	r3, #8
 8004596:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004598:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800459a:	e853 3f00 	ldrex	r3, [r3]
 800459e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3308      	adds	r3, #8
 80045b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045b4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045bc:	e841 2300 	strex	r3, r2, [r1]
 80045c0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1e3      	bne.n	8004590 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045de:	e853 3f00 	ldrex	r3, [r3]
 80045e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045e6:	f023 0310 	bic.w	r3, r3, #16
 80045ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80045fa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004600:	e841 2300 	strex	r3, r2, [r1]
 8004604:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1e4      	bne.n	80045d6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004610:	4618      	mov	r0, r3
 8004612:	f7fc fdf9 	bl	8001208 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2202      	movs	r2, #2
 800461a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004628:	b29b      	uxth	r3, r3
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	b29b      	uxth	r3, r3
 800462e:	4619      	mov	r1, r3
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f8d7 	bl	80047e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004636:	e0b9      	b.n	80047ac <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004644:	b29b      	uxth	r3, r3
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004652:	b29b      	uxth	r3, r3
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 80ab 	beq.w	80047b0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800465a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 80a6 	beq.w	80047b0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466c:	e853 3f00 	ldrex	r3, [r3]
 8004670:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004674:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004678:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	461a      	mov	r2, r3
 8004682:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004686:	647b      	str	r3, [r7, #68]	; 0x44
 8004688:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800468c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800468e:	e841 2300 	strex	r3, r2, [r1]
 8004692:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1e4      	bne.n	8004664 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3308      	adds	r3, #8
 80046a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	e853 3f00 	ldrex	r3, [r3]
 80046a8:	623b      	str	r3, [r7, #32]
   return(result);
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3308      	adds	r3, #8
 80046ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046be:	633a      	str	r2, [r7, #48]	; 0x30
 80046c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046c6:	e841 2300 	strex	r3, r2, [r1]
 80046ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1e3      	bne.n	800469a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	e853 3f00 	ldrex	r3, [r3]
 80046f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 0310 	bic.w	r3, r3, #16
 80046fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	461a      	mov	r2, r3
 8004704:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470c:	69b9      	ldr	r1, [r7, #24]
 800470e:	69fa      	ldr	r2, [r7, #28]
 8004710:	e841 2300 	strex	r3, r2, [r1]
 8004714:	617b      	str	r3, [r7, #20]
   return(result);
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1e4      	bne.n	80046e6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004722:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004726:	4619      	mov	r1, r3
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f85b 	bl	80047e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800472e:	e03f      	b.n	80047b0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00e      	beq.n	800475a <HAL_UART_IRQHandler+0x56a>
 800473c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004740:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d008      	beq.n	800475a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004750:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 ffa6 	bl	80056a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004758:	e02d      	b.n	80047b6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800475a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800475e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00e      	beq.n	8004784 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800476a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476e:	2b00      	cmp	r3, #0
 8004770:	d008      	beq.n	8004784 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004776:	2b00      	cmp	r3, #0
 8004778:	d01c      	beq.n	80047b4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	4798      	blx	r3
    }
    return;
 8004782:	e017      	b.n	80047b4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478c:	2b00      	cmp	r3, #0
 800478e:	d012      	beq.n	80047b6 <HAL_UART_IRQHandler+0x5c6>
 8004790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00c      	beq.n	80047b6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 fdaf 	bl	8005300 <UART_EndTransmit_IT>
    return;
 80047a2:	e008      	b.n	80047b6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80047a4:	bf00      	nop
 80047a6:	e006      	b.n	80047b6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80047a8:	bf00      	nop
 80047aa:	e004      	b.n	80047b6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80047ac:	bf00      	nop
 80047ae:	e002      	b.n	80047b6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80047b0:	bf00      	nop
 80047b2:	e000      	b.n	80047b6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80047b4:	bf00      	nop
  }

}
 80047b6:	37e8      	adds	r7, #232	; 0xe8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	4313      	orrs	r3, r2
 800481e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	4b92      	ldr	r3, [pc, #584]	; (8004a70 <UART_SetConfig+0x274>)
 8004828:	4013      	ands	r3, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6812      	ldr	r2, [r2, #0]
 800482e:	6979      	ldr	r1, [r7, #20]
 8004830:	430b      	orrs	r3, r1
 8004832:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	4313      	orrs	r3, r2
 8004858:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	430a      	orrs	r2, r1
 800486c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a80      	ldr	r2, [pc, #512]	; (8004a74 <UART_SetConfig+0x278>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d120      	bne.n	80048ba <UART_SetConfig+0xbe>
 8004878:	4b7f      	ldr	r3, [pc, #508]	; (8004a78 <UART_SetConfig+0x27c>)
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	f003 0303 	and.w	r3, r3, #3
 8004880:	2b03      	cmp	r3, #3
 8004882:	d817      	bhi.n	80048b4 <UART_SetConfig+0xb8>
 8004884:	a201      	add	r2, pc, #4	; (adr r2, 800488c <UART_SetConfig+0x90>)
 8004886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488a:	bf00      	nop
 800488c:	0800489d 	.word	0x0800489d
 8004890:	080048a9 	.word	0x080048a9
 8004894:	080048af 	.word	0x080048af
 8004898:	080048a3 	.word	0x080048a3
 800489c:	2301      	movs	r3, #1
 800489e:	77fb      	strb	r3, [r7, #31]
 80048a0:	e0b5      	b.n	8004a0e <UART_SetConfig+0x212>
 80048a2:	2302      	movs	r3, #2
 80048a4:	77fb      	strb	r3, [r7, #31]
 80048a6:	e0b2      	b.n	8004a0e <UART_SetConfig+0x212>
 80048a8:	2304      	movs	r3, #4
 80048aa:	77fb      	strb	r3, [r7, #31]
 80048ac:	e0af      	b.n	8004a0e <UART_SetConfig+0x212>
 80048ae:	2308      	movs	r3, #8
 80048b0:	77fb      	strb	r3, [r7, #31]
 80048b2:	e0ac      	b.n	8004a0e <UART_SetConfig+0x212>
 80048b4:	2310      	movs	r3, #16
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e0a9      	b.n	8004a0e <UART_SetConfig+0x212>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a6f      	ldr	r2, [pc, #444]	; (8004a7c <UART_SetConfig+0x280>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d124      	bne.n	800490e <UART_SetConfig+0x112>
 80048c4:	4b6c      	ldr	r3, [pc, #432]	; (8004a78 <UART_SetConfig+0x27c>)
 80048c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048d0:	d011      	beq.n	80048f6 <UART_SetConfig+0xfa>
 80048d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048d6:	d817      	bhi.n	8004908 <UART_SetConfig+0x10c>
 80048d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048dc:	d011      	beq.n	8004902 <UART_SetConfig+0x106>
 80048de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048e2:	d811      	bhi.n	8004908 <UART_SetConfig+0x10c>
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <UART_SetConfig+0xf4>
 80048e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ec:	d006      	beq.n	80048fc <UART_SetConfig+0x100>
 80048ee:	e00b      	b.n	8004908 <UART_SetConfig+0x10c>
 80048f0:	2300      	movs	r3, #0
 80048f2:	77fb      	strb	r3, [r7, #31]
 80048f4:	e08b      	b.n	8004a0e <UART_SetConfig+0x212>
 80048f6:	2302      	movs	r3, #2
 80048f8:	77fb      	strb	r3, [r7, #31]
 80048fa:	e088      	b.n	8004a0e <UART_SetConfig+0x212>
 80048fc:	2304      	movs	r3, #4
 80048fe:	77fb      	strb	r3, [r7, #31]
 8004900:	e085      	b.n	8004a0e <UART_SetConfig+0x212>
 8004902:	2308      	movs	r3, #8
 8004904:	77fb      	strb	r3, [r7, #31]
 8004906:	e082      	b.n	8004a0e <UART_SetConfig+0x212>
 8004908:	2310      	movs	r3, #16
 800490a:	77fb      	strb	r3, [r7, #31]
 800490c:	e07f      	b.n	8004a0e <UART_SetConfig+0x212>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a5b      	ldr	r2, [pc, #364]	; (8004a80 <UART_SetConfig+0x284>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d124      	bne.n	8004962 <UART_SetConfig+0x166>
 8004918:	4b57      	ldr	r3, [pc, #348]	; (8004a78 <UART_SetConfig+0x27c>)
 800491a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004920:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004924:	d011      	beq.n	800494a <UART_SetConfig+0x14e>
 8004926:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800492a:	d817      	bhi.n	800495c <UART_SetConfig+0x160>
 800492c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004930:	d011      	beq.n	8004956 <UART_SetConfig+0x15a>
 8004932:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004936:	d811      	bhi.n	800495c <UART_SetConfig+0x160>
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <UART_SetConfig+0x148>
 800493c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004940:	d006      	beq.n	8004950 <UART_SetConfig+0x154>
 8004942:	e00b      	b.n	800495c <UART_SetConfig+0x160>
 8004944:	2300      	movs	r3, #0
 8004946:	77fb      	strb	r3, [r7, #31]
 8004948:	e061      	b.n	8004a0e <UART_SetConfig+0x212>
 800494a:	2302      	movs	r3, #2
 800494c:	77fb      	strb	r3, [r7, #31]
 800494e:	e05e      	b.n	8004a0e <UART_SetConfig+0x212>
 8004950:	2304      	movs	r3, #4
 8004952:	77fb      	strb	r3, [r7, #31]
 8004954:	e05b      	b.n	8004a0e <UART_SetConfig+0x212>
 8004956:	2308      	movs	r3, #8
 8004958:	77fb      	strb	r3, [r7, #31]
 800495a:	e058      	b.n	8004a0e <UART_SetConfig+0x212>
 800495c:	2310      	movs	r3, #16
 800495e:	77fb      	strb	r3, [r7, #31]
 8004960:	e055      	b.n	8004a0e <UART_SetConfig+0x212>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a47      	ldr	r2, [pc, #284]	; (8004a84 <UART_SetConfig+0x288>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d124      	bne.n	80049b6 <UART_SetConfig+0x1ba>
 800496c:	4b42      	ldr	r3, [pc, #264]	; (8004a78 <UART_SetConfig+0x27c>)
 800496e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004970:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004974:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004978:	d011      	beq.n	800499e <UART_SetConfig+0x1a2>
 800497a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800497e:	d817      	bhi.n	80049b0 <UART_SetConfig+0x1b4>
 8004980:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004984:	d011      	beq.n	80049aa <UART_SetConfig+0x1ae>
 8004986:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800498a:	d811      	bhi.n	80049b0 <UART_SetConfig+0x1b4>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <UART_SetConfig+0x19c>
 8004990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004994:	d006      	beq.n	80049a4 <UART_SetConfig+0x1a8>
 8004996:	e00b      	b.n	80049b0 <UART_SetConfig+0x1b4>
 8004998:	2300      	movs	r3, #0
 800499a:	77fb      	strb	r3, [r7, #31]
 800499c:	e037      	b.n	8004a0e <UART_SetConfig+0x212>
 800499e:	2302      	movs	r3, #2
 80049a0:	77fb      	strb	r3, [r7, #31]
 80049a2:	e034      	b.n	8004a0e <UART_SetConfig+0x212>
 80049a4:	2304      	movs	r3, #4
 80049a6:	77fb      	strb	r3, [r7, #31]
 80049a8:	e031      	b.n	8004a0e <UART_SetConfig+0x212>
 80049aa:	2308      	movs	r3, #8
 80049ac:	77fb      	strb	r3, [r7, #31]
 80049ae:	e02e      	b.n	8004a0e <UART_SetConfig+0x212>
 80049b0:	2310      	movs	r3, #16
 80049b2:	77fb      	strb	r3, [r7, #31]
 80049b4:	e02b      	b.n	8004a0e <UART_SetConfig+0x212>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a33      	ldr	r2, [pc, #204]	; (8004a88 <UART_SetConfig+0x28c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d124      	bne.n	8004a0a <UART_SetConfig+0x20e>
 80049c0:	4b2d      	ldr	r3, [pc, #180]	; (8004a78 <UART_SetConfig+0x27c>)
 80049c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80049c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049cc:	d011      	beq.n	80049f2 <UART_SetConfig+0x1f6>
 80049ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049d2:	d817      	bhi.n	8004a04 <UART_SetConfig+0x208>
 80049d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049d8:	d011      	beq.n	80049fe <UART_SetConfig+0x202>
 80049da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049de:	d811      	bhi.n	8004a04 <UART_SetConfig+0x208>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <UART_SetConfig+0x1f0>
 80049e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049e8:	d006      	beq.n	80049f8 <UART_SetConfig+0x1fc>
 80049ea:	e00b      	b.n	8004a04 <UART_SetConfig+0x208>
 80049ec:	2300      	movs	r3, #0
 80049ee:	77fb      	strb	r3, [r7, #31]
 80049f0:	e00d      	b.n	8004a0e <UART_SetConfig+0x212>
 80049f2:	2302      	movs	r3, #2
 80049f4:	77fb      	strb	r3, [r7, #31]
 80049f6:	e00a      	b.n	8004a0e <UART_SetConfig+0x212>
 80049f8:	2304      	movs	r3, #4
 80049fa:	77fb      	strb	r3, [r7, #31]
 80049fc:	e007      	b.n	8004a0e <UART_SetConfig+0x212>
 80049fe:	2308      	movs	r3, #8
 8004a00:	77fb      	strb	r3, [r7, #31]
 8004a02:	e004      	b.n	8004a0e <UART_SetConfig+0x212>
 8004a04:	2310      	movs	r3, #16
 8004a06:	77fb      	strb	r3, [r7, #31]
 8004a08:	e001      	b.n	8004a0e <UART_SetConfig+0x212>
 8004a0a:	2310      	movs	r3, #16
 8004a0c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a16:	d16b      	bne.n	8004af0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004a18:	7ffb      	ldrb	r3, [r7, #31]
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d838      	bhi.n	8004a90 <UART_SetConfig+0x294>
 8004a1e:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <UART_SetConfig+0x228>)
 8004a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a24:	08004a49 	.word	0x08004a49
 8004a28:	08004a51 	.word	0x08004a51
 8004a2c:	08004a59 	.word	0x08004a59
 8004a30:	08004a91 	.word	0x08004a91
 8004a34:	08004a5f 	.word	0x08004a5f
 8004a38:	08004a91 	.word	0x08004a91
 8004a3c:	08004a91 	.word	0x08004a91
 8004a40:	08004a91 	.word	0x08004a91
 8004a44:	08004a67 	.word	0x08004a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a48:	f7fe f83e 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 8004a4c:	61b8      	str	r0, [r7, #24]
        break;
 8004a4e:	e024      	b.n	8004a9a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a50:	f7fe f85c 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 8004a54:	61b8      	str	r0, [r7, #24]
        break;
 8004a56:	e020      	b.n	8004a9a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a58:	4b0c      	ldr	r3, [pc, #48]	; (8004a8c <UART_SetConfig+0x290>)
 8004a5a:	61bb      	str	r3, [r7, #24]
        break;
 8004a5c:	e01d      	b.n	8004a9a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a5e:	f7fd ffbd 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 8004a62:	61b8      	str	r0, [r7, #24]
        break;
 8004a64:	e019      	b.n	8004a9a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a6a:	61bb      	str	r3, [r7, #24]
        break;
 8004a6c:	e015      	b.n	8004a9a <UART_SetConfig+0x29e>
 8004a6e:	bf00      	nop
 8004a70:	efff69f3 	.word	0xefff69f3
 8004a74:	40013800 	.word	0x40013800
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	40004400 	.word	0x40004400
 8004a80:	40004800 	.word	0x40004800
 8004a84:	40004c00 	.word	0x40004c00
 8004a88:	40005000 	.word	0x40005000
 8004a8c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	77bb      	strb	r3, [r7, #30]
        break;
 8004a98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d073      	beq.n	8004b88 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	005a      	lsls	r2, r3, #1
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	085b      	lsrs	r3, r3, #1
 8004aaa:	441a      	add	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	2b0f      	cmp	r3, #15
 8004aba:	d916      	bls.n	8004aea <UART_SetConfig+0x2ee>
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac2:	d212      	bcs.n	8004aea <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	f023 030f 	bic.w	r3, r3, #15
 8004acc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	085b      	lsrs	r3, r3, #1
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	89fb      	ldrh	r3, [r7, #14]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	89fa      	ldrh	r2, [r7, #14]
 8004ae6:	60da      	str	r2, [r3, #12]
 8004ae8:	e04e      	b.n	8004b88 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	77bb      	strb	r3, [r7, #30]
 8004aee:	e04b      	b.n	8004b88 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004af0:	7ffb      	ldrb	r3, [r7, #31]
 8004af2:	2b08      	cmp	r3, #8
 8004af4:	d827      	bhi.n	8004b46 <UART_SetConfig+0x34a>
 8004af6:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <UART_SetConfig+0x300>)
 8004af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afc:	08004b21 	.word	0x08004b21
 8004b00:	08004b29 	.word	0x08004b29
 8004b04:	08004b31 	.word	0x08004b31
 8004b08:	08004b47 	.word	0x08004b47
 8004b0c:	08004b37 	.word	0x08004b37
 8004b10:	08004b47 	.word	0x08004b47
 8004b14:	08004b47 	.word	0x08004b47
 8004b18:	08004b47 	.word	0x08004b47
 8004b1c:	08004b3f 	.word	0x08004b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b20:	f7fd ffd2 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 8004b24:	61b8      	str	r0, [r7, #24]
        break;
 8004b26:	e013      	b.n	8004b50 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b28:	f7fd fff0 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 8004b2c:	61b8      	str	r0, [r7, #24]
        break;
 8004b2e:	e00f      	b.n	8004b50 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b30:	4b1b      	ldr	r3, [pc, #108]	; (8004ba0 <UART_SetConfig+0x3a4>)
 8004b32:	61bb      	str	r3, [r7, #24]
        break;
 8004b34:	e00c      	b.n	8004b50 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b36:	f7fd ff51 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 8004b3a:	61b8      	str	r0, [r7, #24]
        break;
 8004b3c:	e008      	b.n	8004b50 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b42:	61bb      	str	r3, [r7, #24]
        break;
 8004b44:	e004      	b.n	8004b50 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	77bb      	strb	r3, [r7, #30]
        break;
 8004b4e:	bf00      	nop
    }

    if (pclk != 0U)
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d018      	beq.n	8004b88 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	085a      	lsrs	r2, r3, #1
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	441a      	add	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	2b0f      	cmp	r3, #15
 8004b6e:	d909      	bls.n	8004b84 <UART_SetConfig+0x388>
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b76:	d205      	bcs.n	8004b84 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	60da      	str	r2, [r3, #12]
 8004b82:	e001      	b.n	8004b88 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004b94:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3720      	adds	r7, #32
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	007a1200 	.word	0x007a1200

08004ba4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00a      	beq.n	8004bce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	f003 0310 	and.w	r3, r3, #16
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01a      	beq.n	8004cba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ca2:	d10a      	bne.n	8004cba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	605a      	str	r2, [r3, #4]
  }
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b098      	sub	sp, #96	; 0x60
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cf8:	f7fc f88a 	bl	8000e10 <HAL_GetTick>
 8004cfc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0308 	and.w	r3, r3, #8
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d12e      	bne.n	8004d6a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d14:	2200      	movs	r2, #0
 8004d16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f88c 	bl	8004e38 <UART_WaitOnFlagUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d021      	beq.n	8004d6a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2e:	e853 3f00 	ldrex	r3, [r3]
 8004d32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d3a:	653b      	str	r3, [r7, #80]	; 0x50
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	461a      	mov	r2, r3
 8004d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d44:	647b      	str	r3, [r7, #68]	; 0x44
 8004d46:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d4c:	e841 2300 	strex	r3, r2, [r1]
 8004d50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1e6      	bne.n	8004d26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e062      	b.n	8004e30 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0304 	and.w	r3, r3, #4
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d149      	bne.n	8004e0c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d80:	2200      	movs	r2, #0
 8004d82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f856 	bl	8004e38 <UART_WaitOnFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d03c      	beq.n	8004e0c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	e853 3f00 	ldrex	r3, [r3]
 8004d9e:	623b      	str	r3, [r7, #32]
   return(result);
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	461a      	mov	r2, r3
 8004dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db0:	633b      	str	r3, [r7, #48]	; 0x30
 8004db2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004db8:	e841 2300 	strex	r3, r2, [r1]
 8004dbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1e6      	bne.n	8004d92 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	3308      	adds	r3, #8
 8004dca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0301 	bic.w	r3, r3, #1
 8004dda:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3308      	adds	r3, #8
 8004de2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004de4:	61fa      	str	r2, [r7, #28]
 8004de6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de8:	69b9      	ldr	r1, [r7, #24]
 8004dea:	69fa      	ldr	r2, [r7, #28]
 8004dec:	e841 2300 	strex	r3, r2, [r1]
 8004df0:	617b      	str	r3, [r7, #20]
   return(result);
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e5      	bne.n	8004dc4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e011      	b.n	8004e30 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3758      	adds	r7, #88	; 0x58
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	603b      	str	r3, [r7, #0]
 8004e44:	4613      	mov	r3, r2
 8004e46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e48:	e049      	b.n	8004ede <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e50:	d045      	beq.n	8004ede <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e52:	f7fb ffdd 	bl	8000e10 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d302      	bcc.n	8004e68 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e048      	b.n	8004efe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0304 	and.w	r3, r3, #4
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d031      	beq.n	8004ede <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	f003 0308 	and.w	r3, r3, #8
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d110      	bne.n	8004eaa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2208      	movs	r2, #8
 8004e8e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 f8ff 	bl	8005094 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2208      	movs	r2, #8
 8004e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e029      	b.n	8004efe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb8:	d111      	bne.n	8004ede <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ec2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 f8e5 	bl	8005094 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e00f      	b.n	8004efe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69da      	ldr	r2, [r3, #28]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	bf0c      	ite	eq
 8004eee:	2301      	moveq	r3, #1
 8004ef0:	2300      	movne	r3, #0
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d0a6      	beq.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b097      	sub	sp, #92	; 0x5c
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	4613      	mov	r3, r2
 8004f14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	88fa      	ldrh	r2, [r7, #6]
 8004f20:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	88fa      	ldrh	r2, [r7, #6]
 8004f28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f3a:	d10e      	bne.n	8004f5a <UART_Start_Receive_IT+0x52>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d105      	bne.n	8004f50 <UART_Start_Receive_IT+0x48>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004f4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f4e:	e02d      	b.n	8004fac <UART_Start_Receive_IT+0xa4>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	22ff      	movs	r2, #255	; 0xff
 8004f54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f58:	e028      	b.n	8004fac <UART_Start_Receive_IT+0xa4>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10d      	bne.n	8004f7e <UART_Start_Receive_IT+0x76>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d104      	bne.n	8004f74 <UART_Start_Receive_IT+0x6c>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	22ff      	movs	r2, #255	; 0xff
 8004f6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f72:	e01b      	b.n	8004fac <UART_Start_Receive_IT+0xa4>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	227f      	movs	r2, #127	; 0x7f
 8004f78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f7c:	e016      	b.n	8004fac <UART_Start_Receive_IT+0xa4>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f86:	d10d      	bne.n	8004fa4 <UART_Start_Receive_IT+0x9c>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d104      	bne.n	8004f9a <UART_Start_Receive_IT+0x92>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	227f      	movs	r2, #127	; 0x7f
 8004f94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f98:	e008      	b.n	8004fac <UART_Start_Receive_IT+0xa4>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	223f      	movs	r2, #63	; 0x3f
 8004f9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fa2:	e003      	b.n	8004fac <UART_Start_Receive_IT+0xa4>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2222      	movs	r2, #34	; 0x22
 8004fb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3308      	adds	r3, #8
 8004fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fc6:	e853 3f00 	ldrex	r3, [r3]
 8004fca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fce:	f043 0301 	orr.w	r3, r3, #1
 8004fd2:	657b      	str	r3, [r7, #84]	; 0x54
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3308      	adds	r3, #8
 8004fda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004fdc:	64ba      	str	r2, [r7, #72]	; 0x48
 8004fde:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004fe2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fe4:	e841 2300 	strex	r3, r2, [r1]
 8004fe8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1e5      	bne.n	8004fbc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff8:	d107      	bne.n	800500a <UART_Start_Receive_IT+0x102>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d103      	bne.n	800500a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	4a21      	ldr	r2, [pc, #132]	; (800508c <UART_Start_Receive_IT+0x184>)
 8005006:	669a      	str	r2, [r3, #104]	; 0x68
 8005008:	e002      	b.n	8005010 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4a20      	ldr	r2, [pc, #128]	; (8005090 <UART_Start_Receive_IT+0x188>)
 800500e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d019      	beq.n	800504c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005020:	e853 3f00 	ldrex	r3, [r3]
 8005024:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800502c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	461a      	mov	r2, r3
 8005034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005036:	637b      	str	r3, [r7, #52]	; 0x34
 8005038:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800503c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800503e:	e841 2300 	strex	r3, r2, [r1]
 8005042:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1e6      	bne.n	8005018 <UART_Start_Receive_IT+0x110>
 800504a:	e018      	b.n	800507e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	e853 3f00 	ldrex	r3, [r3]
 8005058:	613b      	str	r3, [r7, #16]
   return(result);
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f043 0320 	orr.w	r3, r3, #32
 8005060:	653b      	str	r3, [r7, #80]	; 0x50
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800506a:	623b      	str	r3, [r7, #32]
 800506c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506e:	69f9      	ldr	r1, [r7, #28]
 8005070:	6a3a      	ldr	r2, [r7, #32]
 8005072:	e841 2300 	strex	r3, r2, [r1]
 8005076:	61bb      	str	r3, [r7, #24]
   return(result);
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1e6      	bne.n	800504c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	375c      	adds	r7, #92	; 0x5c
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	080054fd 	.word	0x080054fd
 8005090:	08005355 	.word	0x08005355

08005094 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005094:	b480      	push	{r7}
 8005096:	b095      	sub	sp, #84	; 0x54
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a4:	e853 3f00 	ldrex	r3, [r3]
 80050a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	461a      	mov	r2, r3
 80050b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ba:	643b      	str	r3, [r7, #64]	; 0x40
 80050bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050c2:	e841 2300 	strex	r3, r2, [r1]
 80050c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1e6      	bne.n	800509c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3308      	adds	r3, #8
 80050d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	f023 0301 	bic.w	r3, r3, #1
 80050e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3308      	adds	r3, #8
 80050ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050f6:	e841 2300 	strex	r3, r2, [r1]
 80050fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1e5      	bne.n	80050ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005106:	2b01      	cmp	r3, #1
 8005108:	d118      	bne.n	800513c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	e853 3f00 	ldrex	r3, [r3]
 8005116:	60bb      	str	r3, [r7, #8]
   return(result);
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f023 0310 	bic.w	r3, r3, #16
 800511e:	647b      	str	r3, [r7, #68]	; 0x44
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	461a      	mov	r2, r3
 8005126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005128:	61bb      	str	r3, [r7, #24]
 800512a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512c:	6979      	ldr	r1, [r7, #20]
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	e841 2300 	strex	r3, r2, [r1]
 8005134:	613b      	str	r3, [r7, #16]
   return(result);
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1e6      	bne.n	800510a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2220      	movs	r2, #32
 8005140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005150:	bf00      	nop
 8005152:	3754      	adds	r7, #84	; 0x54
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f7ff fb28 	bl	80047d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005180:	bf00      	nop
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005188:	b480      	push	{r7}
 800518a:	b08f      	sub	sp, #60	; 0x3c
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005194:	2b21      	cmp	r3, #33	; 0x21
 8005196:	d14d      	bne.n	8005234 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800519e:	b29b      	uxth	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d132      	bne.n	800520a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	e853 3f00 	ldrex	r3, [r3]
 80051b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051b8:	637b      	str	r3, [r7, #52]	; 0x34
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	461a      	mov	r2, r3
 80051c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051c4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051ca:	e841 2300 	strex	r3, r2, [r1]
 80051ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1e6      	bne.n	80051a4 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	e853 3f00 	ldrex	r3, [r3]
 80051e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051ea:	633b      	str	r3, [r7, #48]	; 0x30
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	461a      	mov	r2, r3
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	61bb      	str	r3, [r7, #24]
 80051f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f8:	6979      	ldr	r1, [r7, #20]
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	e841 2300 	strex	r3, r2, [r1]
 8005200:	613b      	str	r3, [r7, #16]
   return(result);
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e6      	bne.n	80051d6 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005208:	e014      	b.n	8005234 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800520e:	781a      	ldrb	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	b292      	uxth	r2, r2
 8005216:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b01      	subs	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005234:	bf00      	nop
 8005236:	373c      	adds	r7, #60	; 0x3c
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005240:	b480      	push	{r7}
 8005242:	b091      	sub	sp, #68	; 0x44
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800524c:	2b21      	cmp	r3, #33	; 0x21
 800524e:	d151      	bne.n	80052f4 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005256:	b29b      	uxth	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d132      	bne.n	80052c2 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	e853 3f00 	ldrex	r3, [r3]
 8005268:	623b      	str	r3, [r7, #32]
   return(result);
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005270:	63bb      	str	r3, [r7, #56]	; 0x38
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527a:	633b      	str	r3, [r7, #48]	; 0x30
 800527c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005282:	e841 2300 	strex	r3, r2, [r1]
 8005286:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1e6      	bne.n	800525c <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	e853 3f00 	ldrex	r3, [r3]
 800529a:	60fb      	str	r3, [r7, #12]
   return(result);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052a2:	637b      	str	r3, [r7, #52]	; 0x34
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	461a      	mov	r2, r3
 80052aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ac:	61fb      	str	r3, [r7, #28]
 80052ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b0:	69b9      	ldr	r1, [r7, #24]
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	e841 2300 	strex	r3, r2, [r1]
 80052b8:	617b      	str	r3, [r7, #20]
   return(result);
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1e6      	bne.n	800528e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80052c0:	e018      	b.n	80052f4 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80052c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ca:	881a      	ldrh	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052d4:	b292      	uxth	r2, r2
 80052d6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052dc:	1c9a      	adds	r2, r3, #2
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80052f4:	bf00      	nop
 80052f6:	3744      	adds	r7, #68	; 0x44
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	e853 3f00 	ldrex	r3, [r3]
 8005314:	60bb      	str	r3, [r7, #8]
   return(result);
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800531c:	61fb      	str	r3, [r7, #28]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	461a      	mov	r2, r3
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	61bb      	str	r3, [r7, #24]
 8005328:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532a:	6979      	ldr	r1, [r7, #20]
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	613b      	str	r3, [r7, #16]
   return(result);
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1e6      	bne.n	8005308 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7ff fa38 	bl	80047bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800534c:	bf00      	nop
 800534e:	3720      	adds	r7, #32
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b09c      	sub	sp, #112	; 0x70
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005362:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800536c:	2b22      	cmp	r3, #34	; 0x22
 800536e:	f040 80b9 	bne.w	80054e4 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005378:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800537c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005380:	b2d9      	uxtb	r1, r3
 8005382:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005386:	b2da      	uxtb	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538c:	400a      	ands	r2, r1
 800538e:	b2d2      	uxtb	r2, r2
 8005390:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005396:	1c5a      	adds	r2, r3, #1
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	3b01      	subs	r3, #1
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f040 809c 	bne.w	80054f4 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c4:	e853 3f00 	ldrex	r3, [r3]
 80053c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053da:	65bb      	str	r3, [r7, #88]	; 0x58
 80053dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053e2:	e841 2300 	strex	r3, r2, [r1]
 80053e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1e6      	bne.n	80053bc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	3308      	adds	r3, #8
 80053f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f8:	e853 3f00 	ldrex	r3, [r3]
 80053fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005400:	f023 0301 	bic.w	r3, r3, #1
 8005404:	667b      	str	r3, [r7, #100]	; 0x64
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3308      	adds	r3, #8
 800540c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800540e:	647a      	str	r2, [r7, #68]	; 0x44
 8005410:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005412:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005414:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005416:	e841 2300 	strex	r3, r2, [r1]
 800541a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800541c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1e5      	bne.n	80053ee <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2220      	movs	r2, #32
 8005426:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d018      	beq.n	8005476 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	e853 3f00 	ldrex	r3, [r3]
 8005450:	623b      	str	r3, [r7, #32]
   return(result);
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005458:	663b      	str	r3, [r7, #96]	; 0x60
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	461a      	mov	r2, r3
 8005460:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005462:	633b      	str	r3, [r7, #48]	; 0x30
 8005464:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800546a:	e841 2300 	strex	r3, r2, [r1]
 800546e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1e6      	bne.n	8005444 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800547a:	2b01      	cmp	r3, #1
 800547c:	d12e      	bne.n	80054dc <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	e853 3f00 	ldrex	r3, [r3]
 8005490:	60fb      	str	r3, [r7, #12]
   return(result);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f023 0310 	bic.w	r3, r3, #16
 8005498:	65fb      	str	r3, [r7, #92]	; 0x5c
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	461a      	mov	r2, r3
 80054a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054a2:	61fb      	str	r3, [r7, #28]
 80054a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a6:	69b9      	ldr	r1, [r7, #24]
 80054a8:	69fa      	ldr	r2, [r7, #28]
 80054aa:	e841 2300 	strex	r3, r2, [r1]
 80054ae:	617b      	str	r3, [r7, #20]
   return(result);
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1e6      	bne.n	8005484 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	f003 0310 	and.w	r3, r3, #16
 80054c0:	2b10      	cmp	r3, #16
 80054c2:	d103      	bne.n	80054cc <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2210      	movs	r2, #16
 80054ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80054d2:	4619      	mov	r1, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff f985 	bl	80047e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054da:	e00b      	b.n	80054f4 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7fb f909 	bl	80006f4 <HAL_UART_RxCpltCallback>
}
 80054e2:	e007      	b.n	80054f4 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699a      	ldr	r2, [r3, #24]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0208 	orr.w	r2, r2, #8
 80054f2:	619a      	str	r2, [r3, #24]
}
 80054f4:	bf00      	nop
 80054f6:	3770      	adds	r7, #112	; 0x70
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b09c      	sub	sp, #112	; 0x70
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800550a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005514:	2b22      	cmp	r3, #34	; 0x22
 8005516:	f040 80b9 	bne.w	800568c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005520:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005528:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800552a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800552e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005532:	4013      	ands	r3, r2
 8005534:	b29a      	uxth	r2, r3
 8005536:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005538:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553e:	1c9a      	adds	r2, r3, #2
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800554a:	b29b      	uxth	r3, r3
 800554c:	3b01      	subs	r3, #1
 800554e:	b29a      	uxth	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800555c:	b29b      	uxth	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	f040 809c 	bne.w	800569c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005574:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005578:	667b      	str	r3, [r7, #100]	; 0x64
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	461a      	mov	r2, r3
 8005580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005582:	657b      	str	r3, [r7, #84]	; 0x54
 8005584:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005588:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e6      	bne.n	8005564 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3308      	adds	r3, #8
 800559c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a0:	e853 3f00 	ldrex	r3, [r3]
 80055a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	f023 0301 	bic.w	r3, r3, #1
 80055ac:	663b      	str	r3, [r7, #96]	; 0x60
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3308      	adds	r3, #8
 80055b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055b6:	643a      	str	r2, [r7, #64]	; 0x40
 80055b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055be:	e841 2300 	strex	r3, r2, [r1]
 80055c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1e5      	bne.n	8005596 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d018      	beq.n	800561e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f2:	6a3b      	ldr	r3, [r7, #32]
 80055f4:	e853 3f00 	ldrex	r3, [r3]
 80055f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005600:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800560a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800560c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005612:	e841 2300 	strex	r3, r2, [r1]
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1e6      	bne.n	80055ec <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005622:	2b01      	cmp	r3, #1
 8005624:	d12e      	bne.n	8005684 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	e853 3f00 	ldrex	r3, [r3]
 8005638:	60bb      	str	r3, [r7, #8]
   return(result);
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	f023 0310 	bic.w	r3, r3, #16
 8005640:	65bb      	str	r3, [r7, #88]	; 0x58
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800564a:	61bb      	str	r3, [r7, #24]
 800564c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564e:	6979      	ldr	r1, [r7, #20]
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	e841 2300 	strex	r3, r2, [r1]
 8005656:	613b      	str	r3, [r7, #16]
   return(result);
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1e6      	bne.n	800562c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	f003 0310 	and.w	r3, r3, #16
 8005668:	2b10      	cmp	r3, #16
 800566a:	d103      	bne.n	8005674 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2210      	movs	r2, #16
 8005672:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800567a:	4619      	mov	r1, r3
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7ff f8b1 	bl	80047e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005682:	e00b      	b.n	800569c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7fb f835 	bl	80006f4 <HAL_UART_RxCpltCallback>
}
 800568a:	e007      	b.n	800569c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699a      	ldr	r2, [r3, #24]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0208 	orr.w	r2, r2, #8
 800569a:	619a      	str	r2, [r3, #24]
}
 800569c:	bf00      	nop
 800569e:	3770      	adds	r7, #112	; 0x70
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <atoi>:
 80056b8:	220a      	movs	r2, #10
 80056ba:	2100      	movs	r1, #0
 80056bc:	f000 b8f0 	b.w	80058a0 <strtol>

080056c0 <__errno>:
 80056c0:	4b01      	ldr	r3, [pc, #4]	; (80056c8 <__errno+0x8>)
 80056c2:	6818      	ldr	r0, [r3, #0]
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	2000000c 	.word	0x2000000c

080056cc <__libc_init_array>:
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	4d0d      	ldr	r5, [pc, #52]	; (8005704 <__libc_init_array+0x38>)
 80056d0:	4c0d      	ldr	r4, [pc, #52]	; (8005708 <__libc_init_array+0x3c>)
 80056d2:	1b64      	subs	r4, r4, r5
 80056d4:	10a4      	asrs	r4, r4, #2
 80056d6:	2600      	movs	r6, #0
 80056d8:	42a6      	cmp	r6, r4
 80056da:	d109      	bne.n	80056f0 <__libc_init_array+0x24>
 80056dc:	4d0b      	ldr	r5, [pc, #44]	; (800570c <__libc_init_array+0x40>)
 80056de:	4c0c      	ldr	r4, [pc, #48]	; (8005710 <__libc_init_array+0x44>)
 80056e0:	f000 f92a 	bl	8005938 <_init>
 80056e4:	1b64      	subs	r4, r4, r5
 80056e6:	10a4      	asrs	r4, r4, #2
 80056e8:	2600      	movs	r6, #0
 80056ea:	42a6      	cmp	r6, r4
 80056ec:	d105      	bne.n	80056fa <__libc_init_array+0x2e>
 80056ee:	bd70      	pop	{r4, r5, r6, pc}
 80056f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056f4:	4798      	blx	r3
 80056f6:	3601      	adds	r6, #1
 80056f8:	e7ee      	b.n	80056d8 <__libc_init_array+0xc>
 80056fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80056fe:	4798      	blx	r3
 8005700:	3601      	adds	r6, #1
 8005702:	e7f2      	b.n	80056ea <__libc_init_array+0x1e>
 8005704:	08005b2c 	.word	0x08005b2c
 8005708:	08005b2c 	.word	0x08005b2c
 800570c:	08005b2c 	.word	0x08005b2c
 8005710:	08005b30 	.word	0x08005b30

08005714 <__itoa>:
 8005714:	1e93      	subs	r3, r2, #2
 8005716:	2b22      	cmp	r3, #34	; 0x22
 8005718:	b510      	push	{r4, lr}
 800571a:	460c      	mov	r4, r1
 800571c:	d904      	bls.n	8005728 <__itoa+0x14>
 800571e:	2300      	movs	r3, #0
 8005720:	700b      	strb	r3, [r1, #0]
 8005722:	461c      	mov	r4, r3
 8005724:	4620      	mov	r0, r4
 8005726:	bd10      	pop	{r4, pc}
 8005728:	2a0a      	cmp	r2, #10
 800572a:	d109      	bne.n	8005740 <__itoa+0x2c>
 800572c:	2800      	cmp	r0, #0
 800572e:	da07      	bge.n	8005740 <__itoa+0x2c>
 8005730:	232d      	movs	r3, #45	; 0x2d
 8005732:	700b      	strb	r3, [r1, #0]
 8005734:	4240      	negs	r0, r0
 8005736:	2101      	movs	r1, #1
 8005738:	4421      	add	r1, r4
 800573a:	f000 f8bb 	bl	80058b4 <__utoa>
 800573e:	e7f1      	b.n	8005724 <__itoa+0x10>
 8005740:	2100      	movs	r1, #0
 8005742:	e7f9      	b.n	8005738 <__itoa+0x24>

08005744 <itoa>:
 8005744:	f7ff bfe6 	b.w	8005714 <__itoa>

08005748 <memcpy>:
 8005748:	440a      	add	r2, r1
 800574a:	4291      	cmp	r1, r2
 800574c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005750:	d100      	bne.n	8005754 <memcpy+0xc>
 8005752:	4770      	bx	lr
 8005754:	b510      	push	{r4, lr}
 8005756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800575a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800575e:	4291      	cmp	r1, r2
 8005760:	d1f9      	bne.n	8005756 <memcpy+0xe>
 8005762:	bd10      	pop	{r4, pc}

08005764 <memset>:
 8005764:	4402      	add	r2, r0
 8005766:	4603      	mov	r3, r0
 8005768:	4293      	cmp	r3, r2
 800576a:	d100      	bne.n	800576e <memset+0xa>
 800576c:	4770      	bx	lr
 800576e:	f803 1b01 	strb.w	r1, [r3], #1
 8005772:	e7f9      	b.n	8005768 <memset+0x4>

08005774 <strncmp>:
 8005774:	b510      	push	{r4, lr}
 8005776:	b17a      	cbz	r2, 8005798 <strncmp+0x24>
 8005778:	4603      	mov	r3, r0
 800577a:	3901      	subs	r1, #1
 800577c:	1884      	adds	r4, r0, r2
 800577e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005782:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005786:	4290      	cmp	r0, r2
 8005788:	d101      	bne.n	800578e <strncmp+0x1a>
 800578a:	42a3      	cmp	r3, r4
 800578c:	d101      	bne.n	8005792 <strncmp+0x1e>
 800578e:	1a80      	subs	r0, r0, r2
 8005790:	bd10      	pop	{r4, pc}
 8005792:	2800      	cmp	r0, #0
 8005794:	d1f3      	bne.n	800577e <strncmp+0xa>
 8005796:	e7fa      	b.n	800578e <strncmp+0x1a>
 8005798:	4610      	mov	r0, r2
 800579a:	e7f9      	b.n	8005790 <strncmp+0x1c>

0800579c <_strtol_l.constprop.0>:
 800579c:	2b01      	cmp	r3, #1
 800579e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057a2:	d001      	beq.n	80057a8 <_strtol_l.constprop.0+0xc>
 80057a4:	2b24      	cmp	r3, #36	; 0x24
 80057a6:	d906      	bls.n	80057b6 <_strtol_l.constprop.0+0x1a>
 80057a8:	f7ff ff8a 	bl	80056c0 <__errno>
 80057ac:	2316      	movs	r3, #22
 80057ae:	6003      	str	r3, [r0, #0]
 80057b0:	2000      	movs	r0, #0
 80057b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800589c <_strtol_l.constprop.0+0x100>
 80057ba:	460d      	mov	r5, r1
 80057bc:	462e      	mov	r6, r5
 80057be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80057c2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80057c6:	f017 0708 	ands.w	r7, r7, #8
 80057ca:	d1f7      	bne.n	80057bc <_strtol_l.constprop.0+0x20>
 80057cc:	2c2d      	cmp	r4, #45	; 0x2d
 80057ce:	d132      	bne.n	8005836 <_strtol_l.constprop.0+0x9a>
 80057d0:	782c      	ldrb	r4, [r5, #0]
 80057d2:	2701      	movs	r7, #1
 80057d4:	1cb5      	adds	r5, r6, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d05b      	beq.n	8005892 <_strtol_l.constprop.0+0xf6>
 80057da:	2b10      	cmp	r3, #16
 80057dc:	d109      	bne.n	80057f2 <_strtol_l.constprop.0+0x56>
 80057de:	2c30      	cmp	r4, #48	; 0x30
 80057e0:	d107      	bne.n	80057f2 <_strtol_l.constprop.0+0x56>
 80057e2:	782c      	ldrb	r4, [r5, #0]
 80057e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80057e8:	2c58      	cmp	r4, #88	; 0x58
 80057ea:	d14d      	bne.n	8005888 <_strtol_l.constprop.0+0xec>
 80057ec:	786c      	ldrb	r4, [r5, #1]
 80057ee:	2310      	movs	r3, #16
 80057f0:	3502      	adds	r5, #2
 80057f2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80057f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80057fa:	f04f 0c00 	mov.w	ip, #0
 80057fe:	fbb8 f9f3 	udiv	r9, r8, r3
 8005802:	4666      	mov	r6, ip
 8005804:	fb03 8a19 	mls	sl, r3, r9, r8
 8005808:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800580c:	f1be 0f09 	cmp.w	lr, #9
 8005810:	d816      	bhi.n	8005840 <_strtol_l.constprop.0+0xa4>
 8005812:	4674      	mov	r4, lr
 8005814:	42a3      	cmp	r3, r4
 8005816:	dd24      	ble.n	8005862 <_strtol_l.constprop.0+0xc6>
 8005818:	f1bc 0f00 	cmp.w	ip, #0
 800581c:	db1e      	blt.n	800585c <_strtol_l.constprop.0+0xc0>
 800581e:	45b1      	cmp	r9, r6
 8005820:	d31c      	bcc.n	800585c <_strtol_l.constprop.0+0xc0>
 8005822:	d101      	bne.n	8005828 <_strtol_l.constprop.0+0x8c>
 8005824:	45a2      	cmp	sl, r4
 8005826:	db19      	blt.n	800585c <_strtol_l.constprop.0+0xc0>
 8005828:	fb06 4603 	mla	r6, r6, r3, r4
 800582c:	f04f 0c01 	mov.w	ip, #1
 8005830:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005834:	e7e8      	b.n	8005808 <_strtol_l.constprop.0+0x6c>
 8005836:	2c2b      	cmp	r4, #43	; 0x2b
 8005838:	bf04      	itt	eq
 800583a:	782c      	ldrbeq	r4, [r5, #0]
 800583c:	1cb5      	addeq	r5, r6, #2
 800583e:	e7ca      	b.n	80057d6 <_strtol_l.constprop.0+0x3a>
 8005840:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005844:	f1be 0f19 	cmp.w	lr, #25
 8005848:	d801      	bhi.n	800584e <_strtol_l.constprop.0+0xb2>
 800584a:	3c37      	subs	r4, #55	; 0x37
 800584c:	e7e2      	b.n	8005814 <_strtol_l.constprop.0+0x78>
 800584e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005852:	f1be 0f19 	cmp.w	lr, #25
 8005856:	d804      	bhi.n	8005862 <_strtol_l.constprop.0+0xc6>
 8005858:	3c57      	subs	r4, #87	; 0x57
 800585a:	e7db      	b.n	8005814 <_strtol_l.constprop.0+0x78>
 800585c:	f04f 3cff 	mov.w	ip, #4294967295
 8005860:	e7e6      	b.n	8005830 <_strtol_l.constprop.0+0x94>
 8005862:	f1bc 0f00 	cmp.w	ip, #0
 8005866:	da05      	bge.n	8005874 <_strtol_l.constprop.0+0xd8>
 8005868:	2322      	movs	r3, #34	; 0x22
 800586a:	6003      	str	r3, [r0, #0]
 800586c:	4646      	mov	r6, r8
 800586e:	b942      	cbnz	r2, 8005882 <_strtol_l.constprop.0+0xe6>
 8005870:	4630      	mov	r0, r6
 8005872:	e79e      	b.n	80057b2 <_strtol_l.constprop.0+0x16>
 8005874:	b107      	cbz	r7, 8005878 <_strtol_l.constprop.0+0xdc>
 8005876:	4276      	negs	r6, r6
 8005878:	2a00      	cmp	r2, #0
 800587a:	d0f9      	beq.n	8005870 <_strtol_l.constprop.0+0xd4>
 800587c:	f1bc 0f00 	cmp.w	ip, #0
 8005880:	d000      	beq.n	8005884 <_strtol_l.constprop.0+0xe8>
 8005882:	1e69      	subs	r1, r5, #1
 8005884:	6011      	str	r1, [r2, #0]
 8005886:	e7f3      	b.n	8005870 <_strtol_l.constprop.0+0xd4>
 8005888:	2430      	movs	r4, #48	; 0x30
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1b1      	bne.n	80057f2 <_strtol_l.constprop.0+0x56>
 800588e:	2308      	movs	r3, #8
 8005890:	e7af      	b.n	80057f2 <_strtol_l.constprop.0+0x56>
 8005892:	2c30      	cmp	r4, #48	; 0x30
 8005894:	d0a5      	beq.n	80057e2 <_strtol_l.constprop.0+0x46>
 8005896:	230a      	movs	r3, #10
 8005898:	e7ab      	b.n	80057f2 <_strtol_l.constprop.0+0x56>
 800589a:	bf00      	nop
 800589c:	08005a2a 	.word	0x08005a2a

080058a0 <strtol>:
 80058a0:	4613      	mov	r3, r2
 80058a2:	460a      	mov	r2, r1
 80058a4:	4601      	mov	r1, r0
 80058a6:	4802      	ldr	r0, [pc, #8]	; (80058b0 <strtol+0x10>)
 80058a8:	6800      	ldr	r0, [r0, #0]
 80058aa:	f7ff bf77 	b.w	800579c <_strtol_l.constprop.0>
 80058ae:	bf00      	nop
 80058b0:	2000000c 	.word	0x2000000c

080058b4 <__utoa>:
 80058b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058b6:	4c1f      	ldr	r4, [pc, #124]	; (8005934 <__utoa+0x80>)
 80058b8:	b08b      	sub	sp, #44	; 0x2c
 80058ba:	4605      	mov	r5, r0
 80058bc:	460b      	mov	r3, r1
 80058be:	466e      	mov	r6, sp
 80058c0:	f104 0c20 	add.w	ip, r4, #32
 80058c4:	6820      	ldr	r0, [r4, #0]
 80058c6:	6861      	ldr	r1, [r4, #4]
 80058c8:	4637      	mov	r7, r6
 80058ca:	c703      	stmia	r7!, {r0, r1}
 80058cc:	3408      	adds	r4, #8
 80058ce:	4564      	cmp	r4, ip
 80058d0:	463e      	mov	r6, r7
 80058d2:	d1f7      	bne.n	80058c4 <__utoa+0x10>
 80058d4:	7921      	ldrb	r1, [r4, #4]
 80058d6:	7139      	strb	r1, [r7, #4]
 80058d8:	1e91      	subs	r1, r2, #2
 80058da:	6820      	ldr	r0, [r4, #0]
 80058dc:	6038      	str	r0, [r7, #0]
 80058de:	2922      	cmp	r1, #34	; 0x22
 80058e0:	f04f 0100 	mov.w	r1, #0
 80058e4:	d904      	bls.n	80058f0 <__utoa+0x3c>
 80058e6:	7019      	strb	r1, [r3, #0]
 80058e8:	460b      	mov	r3, r1
 80058ea:	4618      	mov	r0, r3
 80058ec:	b00b      	add	sp, #44	; 0x2c
 80058ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058f0:	1e58      	subs	r0, r3, #1
 80058f2:	4684      	mov	ip, r0
 80058f4:	fbb5 f7f2 	udiv	r7, r5, r2
 80058f8:	fb02 5617 	mls	r6, r2, r7, r5
 80058fc:	3628      	adds	r6, #40	; 0x28
 80058fe:	446e      	add	r6, sp
 8005900:	460c      	mov	r4, r1
 8005902:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005906:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800590a:	462e      	mov	r6, r5
 800590c:	42b2      	cmp	r2, r6
 800590e:	f101 0101 	add.w	r1, r1, #1
 8005912:	463d      	mov	r5, r7
 8005914:	d9ee      	bls.n	80058f4 <__utoa+0x40>
 8005916:	2200      	movs	r2, #0
 8005918:	545a      	strb	r2, [r3, r1]
 800591a:	1919      	adds	r1, r3, r4
 800591c:	1aa5      	subs	r5, r4, r2
 800591e:	42aa      	cmp	r2, r5
 8005920:	dae3      	bge.n	80058ea <__utoa+0x36>
 8005922:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005926:	780e      	ldrb	r6, [r1, #0]
 8005928:	7006      	strb	r6, [r0, #0]
 800592a:	3201      	adds	r2, #1
 800592c:	f801 5901 	strb.w	r5, [r1], #-1
 8005930:	e7f4      	b.n	800591c <__utoa+0x68>
 8005932:	bf00      	nop
 8005934:	08005a04 	.word	0x08005a04

08005938 <_init>:
 8005938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593a:	bf00      	nop
 800593c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800593e:	bc08      	pop	{r3}
 8005940:	469e      	mov	lr, r3
 8005942:	4770      	bx	lr

08005944 <_fini>:
 8005944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005946:	bf00      	nop
 8005948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594a:	bc08      	pop	{r3}
 800594c:	469e      	mov	lr, r3
 800594e:	4770      	bx	lr
